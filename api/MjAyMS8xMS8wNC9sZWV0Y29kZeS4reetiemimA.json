{"title":"leetcode中等题","date":"2021-11-04T12:14:57.000Z","date_formatted":{"ll":"Nov 4, 2021","L":"11/04/2021","MM-DD":"11-04"},"link":"2021/11/04/leetcode中等题","comments":true,"tags":["leetcode","算法"],"categories":["Programming"],"updated":"2021-11-04T13:28:48.150Z","content":"<h2 id=\"题目一：--二维数组中的查找\">题目一： <a href=\"https://leetcode-cn.com/problems/er-wei-shu-zu-zhong-de-cha-zhao-lcof/\" target=\"_blank\" rel=\"noopener\" title=\"二维数组中的查找\">二维数组中的查找</a><a href=\"#题目一：--二维数组中的查找\" title=\"题目一：  二维数组中的查找\"></a></h2><p><strong>题目描述</strong>：在一个 $n * m$的二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个高效的函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p>\n<p><strong>示例：</strong> 现有矩阵 $matrix$​​ 如下:</p>\n<p>$\\left[\n\\matrix{\n  1&amp;4&amp;7&amp;11&amp;15\\\n  2&amp;5&amp;8&amp;12&amp;19\\\n  3&amp;6&amp;9&amp;16&amp;22\\\n  10&amp;13&amp;14&amp;17&amp;24\\\n  18&amp;21&amp;23&amp;26&amp;30\\\n}\n\\right]$​​​​​</p>\n<p>给定 $target=5$​，返回 $true$​。</p>\n<p>给定 $target = 20$​，返回 $false$​。</p>\n<p><strong>限制：</strong>  </p>\n<ul><li>$0 &lt;= n &lt;= 1000$</li><li>$0 &lt;= m &lt;= 1000$</li></ul><p><strong>题解：</strong></p>\n<p>算法思路：</p>\n<p>从二维数组的右上角开始往左或往下查找。因为对于每个元素来说，左边的值都比自己小，下面的值都比自己大。因此如果当前元素大于目标值，往左查找；如果当前元素小于目标值，往下查找。</p>\n<ul><li>时间复杂度：$O(n+m)$。往下查找最多走 <code>n</code> 次，往左查找最多走 <code>m</code> 次，因此循环体最多执行 <code>n + m</code> 次。</li><li>空间复杂度：$O(1)$</li></ul><p>伪代码：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (matrix[] &#x3D;&#x3D; NULL)</span><br><span class=\"line\">\t\tthen return FALSE</span><br><span class=\"line\">end if</span><br><span class=\"line\">row ← 0</span><br><span class=\"line\">col ← colnum -1</span><br><span class=\"line\">repeat</span><br><span class=\"line\">\t\tif (target &lt; matrix[row,col] &amp;&amp; col &gt; 0)</span><br><span class=\"line\">\t\t\t\tthen col ← col - 1</span><br><span class=\"line\">\t\t\t\telse if(target &gt; matrix[row,col] &amp;&amp; row &lt; rownum-1)</span><br><span class=\"line\">\t\t\t\t\t\tthen row ← row + 1</span><br><span class=\"line\">\t\tend if</span><br><span class=\"line\">untile target &#x3D;&#x3D; matrix[row,col]</span><br><span class=\"line\">if (target !&#x3D; matrix[row,col])</span><br><span class=\"line\">\t\tthen return FALSE</span><br><span class=\"line\">\t\telse return row,col</span><br></pre></td></tr></table></figure>\n\n<p>代码：</p>\n<figure class=\"highlight++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">findNumberIn2DArray</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt;&amp; matrix, <span class=\"keyword\">int</span> target)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(matrix.<span class=\"built_in\">size</span>() == <span class=\"number\">0</span> || matrix[<span class=\"number\">0</span>].<span class=\"built_in\">size</span>() == <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> rownum = matrix.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> colnum = matrix[<span class=\"number\">0</span>].<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> row = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> col = matrix[<span class=\"number\">0</span>].<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(row &lt;= rownum<span class=\"number\">-1</span> &amp;&amp; col &gt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(target &lt; matrix[row][col] &amp;&amp; col &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                col--;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(target &gt; matrix[row][col] &amp;&amp; row &lt; rownum<span class=\"number\">-1</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                row++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(target == matrix[row][col])</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"题目二：-前-k-个高频元素\">题目二： <a href=\"https://leetcode-cn.com/problems/top-k-frequent-elements/\" target=\"_blank\" rel=\"noopener\" title=\"前 K 个高频元素\">前 K 个高频元素</a><a href=\"#题目二：-前-k-个高频元素\" title=\"题目二： 前 K 个高频元素\"></a></h2><p><strong>题目描述：</strong> 给你一个整数数组$nums$和一个整数$k$，请你返回其中出现频率前$k$高的元素。你可以按<strong>任意顺序</strong>返回答案。</p>\n<p><strong>示例 1：</strong>\n输入：$nums = [1, 1, 1, 2, 2, 3], k = 2$​​\n输出：$[1, 2]$​</p>\n<p><strong>示例 2：</strong>\n输入：$nums = [1], k = 1$​​\n输出：$[1]$​</p>\n<p><strong>提示：</strong></p>\n<ul><li>$1 &lt;= nums.length &lt;= 10^5$</li><li>$k$ 的取值范围是$[1, \\rm{数组中不相同的元素的个数}]$</li><li>题目数据保证答案唯一，换句话说，数组中前$k$个高频元素的集合是唯一的</li></ul><p><strong>题解：</strong></p>\n<p>算法思路：</p>\n<p>先遍历一遍数组，用一个哈希表记录每个元素出现的次数。建立一个小顶堆，保持小顶堆中只有k对&lt;元素，出现次数&gt;。遍历哈希表中的每一对</p>\n<ul><li>如果小顶堆中不足k对，直接插入堆</li><li>如果小顶堆中已有k对，哈希表中当前对和小顶堆的堆顶比较出现次数，如果哈希表中当前更小，说明已经有至少k对比它出现次数多，舍弃，否则要弹出堆顶，将哈希表中当前对加入堆。</li></ul><p>伪代码：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>代码：</p>\n<figure class=\"highlight++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">occur_heap</span>&#123;</span></span><br><span class=\"line\">        pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; m;   <span class=\"comment\">//pair 的第一个元素代表数组的值，第二个元素代表了该值出现的次数</span></span><br><span class=\"line\">        <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> &lt; (<span class=\"keyword\">const</span> occur_heap &amp;oh) <span class=\"keyword\">const</span> &#123; <span class=\"comment\">//默认优先队列是大顶堆，这里指定排序方式，改为根据m.second排序的小顶堆</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> m.second &gt; oh.m.second;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">topKFrequent</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; nums, <span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">unordered_map</span>&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; occurrences;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span>&amp; v : nums)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            occurrences[v]++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        priority_queue&lt;occur_heap&gt; pq;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span>&amp; [num, count] : occurrences)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(pq.<span class=\"built_in\">size</span>() == k)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(pq.top().m.second &lt; count)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    pq.pop();</span><br><span class=\"line\">                    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">occur_heap</span> <span class=\"title\">n</span>;</span></span><br><span class=\"line\">                    n.m.first = num;</span><br><span class=\"line\">                    n.m.second = count;</span><br><span class=\"line\">                    pq.push(n);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                struct occur_heap n;</span><br><span class=\"line\">                n.m.first = num;</span><br><span class=\"line\">                n.m.second = count;</span><br><span class=\"line\">                pq.push(n);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; ret;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(!pq.empty())</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ret.push_back(pq.top().m.first);</span><br><span class=\"line\">            pq.pop();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"题目一：不同路径-ii\">题目一：<a href=\"https://leetcode-cn.com/problems/unique-paths-ii/\" target=\"_blank\">不同路径 II</a><a href=\"#题目一：不同路径-ii\" title=\"题目一：不同路径 II\"></a></h2><p><strong>题目描述</strong>：一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为“Start” ）。</p>\n<p>机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为“Finish”）。</p>\n<p>现在考虑网格中有障碍物。那么从左上角到右下角将会有多少条不同的路径？</p>\n<p><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/22/robot_maze.png\" class=\"φcy\" alt=\"img\"></p>\n<p>网格中的障碍物和空位置分别用 <code>1</code> 和 <code>0</code> 来表示。</p>\n<p><strong>示例：</strong> </p>\n<p><img src=\"https://assets.leetcode.com/uploads/2020/11/04/robot1.jpg\" class=\"φcy\" alt=\"img\"></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：obstacleGrid &#x3D; [[0,0,0],[0,1,0],[0,0,0]]</span><br><span class=\"line\">输出：2</span><br><span class=\"line\">解释：</span><br><span class=\"line\">3x3 网格的正中间有一个障碍物。</span><br><span class=\"line\">从左上角到右下角一共有 2 条不同的路径：</span><br><span class=\"line\">1. 向右 -&gt; 向右 -&gt; 向下 -&gt; 向下</span><br><span class=\"line\">2. 向下 -&gt; 向下 -&gt; 向右 -&gt; 向右</span><br></pre></td></tr></table></figure>\n\n<p><strong>题解：</strong></p>\n<p><strong>算法思路：</strong></p>\n<p>简单描述算法的求解思路</p>\n<p><strong>伪代码：</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>代码：</strong></p>\n<pre><code></code></pre>","prev":{"title":"纪念老许","link":"2022/01/10/纪念老许"},"next":{"title":"在jetson nano上使用aircrack","link":"2021/02/19/在jetson-nano上使用aircrack"},"plink":"https://yuyuoo.github.io/2021/11/04/leetcode中等题/","toc":[{"id":"题目一：--二维数组中的查找","title":"题目一： 二维数组中的查找","index":"1"},{"id":"题目二：-前-k-个高频元素","title":"题目二： 前 K 个高频元素","index":"2"},{"id":"题目一：不同路径-ii","title":"题目一：不同路径 II","index":"3"}],"copyright":{"license":"Attribution-NonCommercial-NoDerivatives 4.0 International","published":"November 4, 2021","updated":"November 4, 2021","author":"YuYuoo"}}