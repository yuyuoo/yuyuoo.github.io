{"title":"csp刷题笔记（第3-4题）","date":"2020-02-10T06:55:10.000Z","date_formatted":{"ll":"Feb 10, 2020","L":"02/10/2020","MM-DD":"02-10"},"thumbnail":"https://i.loli.net/2020/01/21/3IHaWncu64zsPBo.jpg","link":"2020/02/10/csp刷题笔记（第3-4题）","comments":true,"tags":["csp","算法"],"categories":["Programming"],"updated":"2020-09-10T09:00:28.438Z","content":"<h4 id=\"201912-3-化学方程式\">201912-3 化学方程式<a href=\"#201912-3-化学方程式\" title=\"201912-3 化学方程式\"></a></h4><p><strong>题目：</strong></p>\n<blockquote>\n<p>化学方程式，也称为化学反应方程式，是用化学式表示化学反应的式子。给出一组化学方程式，请你编写程序判断每个方程式是否配平（也就是方程式中等号左右两边的元素种类和对应的原子个数是否相同）。\n本题给出的化学方程式由大小写字母、数字和符号（包括等号 =、加号 +、左圆括号和右圆括号）组成，不会出现其他字符（包括空白字符，如空格、制表符等），化学方程式的格式与化学课本中的形式基本相同（化学式中表示元素原子个数的下标用正常文本，如 H2O 写成 H2O），用自然语言描述如下：</p>\n<ul><li>化学方程式由左右两个表达式组成，中间用一个等号三连接，如 2H2+O2=2H2O；</li><li>表达式由若干部分组成，每部分由系数和化学式构成，部分之间用加号 + 连接，如 2H2+O2、2H2O；</li><li>系数是整数或空串，如为空串表示系数为 1；</li><li>整数由一个或多个数字构成；</li><li>化学式由若干部分组成，每部分由项和系数构成，部分之间直接连接，如 H2O、CO2、Ca (OH) 2、Ba3 (PO4) 2；</li><li>项是元素或用左右圆括号括起来的化学式，如 H、Ca、(OH)、(P04)；</li><li>元素可以是一个大写字母，也可以是一个大写字母跟着一个小写字母，如 H、O、Ca。</li></ul></blockquote>\n<p><strong>输入</strong></p>\n<blockquote>\n<p>从标准输入读入数据。\n输入的第一行包含一个正整数 n，表示输入的化学方程式个数。\n接下来 n 行，每行是一个符合定义的化学方程式。</p>\n</blockquote>\n<p><strong>输出</strong></p>\n<blockquote>\n<p>输出到标准输出。\n输出共 n 行，每行是一个大写字母 Y 或 N，回答输入中相应的化学方程式是否配平。</p>\n</blockquote>\n<p><strong>输入样例 1</strong></p>\n<blockquote>\n<p>11  </p>\n<p>H2+O2=H2O<br>2H2+O2=2H2O<br>H2+Cl2=2NaCl<br>H2+Cl2=2HCl<br>CH4+2O2=CO2+2H2O<br>CaCl2+2AgNO3=Ca(NO3)2+2AgCl<br>3Ba(OH)2+2H3PO4=6H2O+Ba3(PO4)2<br>3Ba(OH)2+2H3PO4=Ba3(PO4)2+6H2O<br>4Zn+10HNO3=4Zn(NO3)2+NH4NO3+3H2O<br>4Au+8NaCN+2H2O+O2=4Na(Au(CN)2)+4NaOH<br>Cu+As=Cs+Au</p>\n</blockquote>\n<p><strong>输出样例 1</strong></p>\n<blockquote>\n<p>N  \nY<br>N  \nY<br>Y  \nY<br>Y  \nY<br>Y  \nY<br>N</p>\n</blockquote>\n<p><strong>解题思路</strong></p>\n<p>首先要清楚系数出现位置的三种情况：\n <strong>1、整个化学式的首部\n 2、元素的右部\n 3、右括号的右部</strong>\n 如 32Ba ((OH) 2 (CO3) 2) 3（暂不考虑化学式的合法性）\n 我们从系数入手，<strong>在第一种情况下，该系数作用于化学式中的所有元素；在第二种情况下，该系数作用于紧接着的左边的元素；在第三种情况下，该系数作用于紧接着的左边的匹配括号里的所有元素</strong>，请通过上例理解。\n 为此，我们考虑使用一个数组将化学式的各部分存储起来 arr，实现逻辑如下：\n 1、顺序遍历化学式\n 2、计算系数的第 1 种情况，也就是整个化学式的系数 factor，继续遍历。\n 3、遇到左或右括号时，将左或右括号加入到 arr 中；遇到大写字母时，获取元素名称，将元素名称加入到 arr 中；遇到数字时，不存到 arr 中，根据系数的第 2、3 种情况相应处理（第 1 种情况已经在第二步处理完成）。\n 4、对于系数的第 2 种情况，此时数组 arr 的最后一个元素就是元素名称，系数作用于它即可；对于系数的第 3 种情况，从数组尾部逆序遍历，直到遇到左括号，将系数作用于这个范围中的元素，同时要将这一对匹配括号从数组中删除。\n 至此处理化学式的过程结束。\n 对于整个化学方程式，将其从等号两边分开处理。使用两个 <strong>map</strong> 分别记录左右两边的元素个数，再进行比较。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cctype&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;sstream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Elem</span>&#123;</span> <span class=\"comment\">//元素 </span></span><br><span class=\"line\">\t<span class=\"built_in\">string</span> name; <span class=\"comment\">//名称 </span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> num; <span class=\"comment\">//个数 </span></span><br><span class=\"line\">\tElem(<span class=\"built_in\">string</span> _name, <span class=\"keyword\">int</span> _num): name(_name), num(_num)&#123;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//从str的pos位置开始，得到一个数字</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">toNumber</span><span class=\"params\">(<span class=\"built_in\">string</span> str, <span class=\"keyword\">int</span> &amp;pos)</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">\t<span class=\"keyword\">int</span> num = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(<span class=\"built_in\">isdigit</span>(str[pos]))&#123;</span><br><span class=\"line\">\t\tnum = num*<span class=\"number\">10</span> + str[pos]-<span class=\"string\">'0'</span>;</span><br><span class=\"line\">\t\tpos++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> num; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">calc</span><span class=\"params\">(<span class=\"built_in\">string</span> &amp;str, <span class=\"built_in\">map</span>&lt;<span class=\"built_in\">string</span>, <span class=\"keyword\">int</span>&gt; &amp;mp)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"built_in\">stringstream</span> <span class=\"title\">ss</span><span class=\"params\">(str)</span></span>;</span><br><span class=\"line\">\t<span class=\"built_in\">string</span> item;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(getline(ss, item, <span class=\"string\">'+'</span>))   <span class=\"comment\">//获取每一个化学式，如 32Ba((OH)2(CO3)2)3 </span></span><br><span class=\"line\">    &#123; </span><br><span class=\"line\">\t </span><br><span class=\"line\">\t\t<span class=\"built_in\">vector</span>&lt;Elem&gt; arr; <span class=\"comment\">//存储化学式的分解序列， 如 Ba、(、(、O、H、)、(、C、O、)、) </span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> factor = <span class=\"number\">1</span>; <span class=\"comment\">//整个化学式的系数，默认为1 </span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"built_in\">isdigit</span>(item[i])) factor = toNumber(item,i); <span class=\"comment\">//计算化学式系数</span></span><br><span class=\"line\">\t\t </span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(i &lt; item.<span class=\"built_in\">size</span>())</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(<span class=\"built_in\">isdigit</span>(item[i]))</span><br><span class=\"line\">            &#123; <span class=\"comment\">//处理数字</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> num = toNumber(item,i);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(arr[arr.<span class=\"built_in\">size</span>()<span class=\"number\">-1</span>].name == <span class=\"string\">\")\"</span>)   <span class=\"comment\">//序列最后一个元素是右括号，这个数字是后缀</span></span><br><span class=\"line\">                &#123;  </span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">int</span> j = arr.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t\t\tarr[j].name = <span class=\"string\">\"*\"</span>; <span class=\"comment\">//将右括号标记为*，忽略它的存在，防止外层还有括号导致后续左右括号匹配出错</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">while</span>(arr[--j].name != <span class=\"string\">\"(\"</span>)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">\t\t\t\t\t\tarr[j].num *= num;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\tarr[j].name = <span class=\"string\">\"*\"</span>; <span class=\"comment\">//将左括号标记为*，忽略它的存在 </span></span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">else</span> arr[arr.<span class=\"built_in\">size</span>()<span class=\"number\">-1</span>].num *= num; <span class=\"comment\">//序列最后一个元素是元素名称，如H2O</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(item[i] == <span class=\"string\">'('</span>)   <span class=\"comment\">//处理左括号</span></span><br><span class=\"line\">            &#123;  </span><br><span class=\"line\">\t\t\t\tarr.push_back(Elem(<span class=\"string\">\"(\"</span>, <span class=\"number\">0</span>));  <span class=\"comment\">//括号加入到序列中</span></span><br><span class=\"line\">\t\t\t\ti++;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(item[i] == <span class=\"string\">')'</span>)   <span class=\"comment\">//处理右括号</span></span><br><span class=\"line\">            &#123; </span><br><span class=\"line\">\t\t\t\tarr.push_back(Elem(<span class=\"string\">\")\"</span>, <span class=\"number\">0</span>));  <span class=\"comment\">//括号加入到序列中</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(!<span class=\"built_in\">isdigit</span>(item[i+<span class=\"number\">1</span>])) item.insert(i+<span class=\"number\">1</span>,<span class=\"string\">\"1\"</span>); <span class=\"comment\">//考虑到右括号右边可能不出现数字，补充底数1 </span></span><br><span class=\"line\">\t\t\t\ti++;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"built_in\">isupper</span>(item[i]))    <span class=\"comment\">//处理大写字母</span></span><br><span class=\"line\">            &#123; </span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//得到元素名称 </span></span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">string</span> name = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">\t\t\t\tname += item[i]; <span class=\"comment\">//大写字目 </span></span><br><span class=\"line\">\t\t\t\ti++;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(<span class=\"built_in\">islower</span>(item[i]))    <span class=\"comment\">//小写字母</span></span><br><span class=\"line\">                &#123;  </span><br><span class=\"line\">\t\t\t\t\tname += item[i];</span><br><span class=\"line\">\t\t\t\t\ti++;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\tarr.push_back(Elem(name,<span class=\"number\">1</span>)); <span class=\"comment\">//名称加入到序列中 </span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i != arr.<span class=\"built_in\">size</span>(); ++i)    <span class=\"comment\">//将“元素-&gt;个数”保存到map中 </span></span><br><span class=\"line\">        &#123; </span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(arr[i].name == <span class=\"string\">\"*\"</span>) <span class=\"keyword\">continue</span>; <span class=\"comment\">//忽略序列中括号的存在 </span></span><br><span class=\"line\">\t\t\tmp[arr[i].name] += arr[i].num * factor;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//判断两个map是否相同</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">judge</span><span class=\"params\">(<span class=\"built_in\">map</span>&lt;<span class=\"built_in\">string</span>, <span class=\"keyword\">int</span>&gt; &amp;left, <span class=\"built_in\">map</span>&lt;<span class=\"built_in\">string</span>, <span class=\"keyword\">int</span>&gt; &amp;right)</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(left.<span class=\"built_in\">size</span>() != right.<span class=\"built_in\">size</span>()) </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"built_in\">map</span>&lt;<span class=\"built_in\">string</span>, <span class=\"keyword\">int</span>&gt;::iterator it = left.<span class=\"built_in\">begin</span>(); it != left.<span class=\"built_in\">end</span>(); ++it)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(right[it-&gt;first] != it-&gt;second)  <span class=\"comment\">//比较同一个字母的num在左右两边是否一样，访问num有两种方式</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;n);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">map</span>&lt;<span class=\"built_in\">string</span>, <span class=\"keyword\">int</span>&gt; left, right;</span><br><span class=\"line\">\t\t<span class=\"built_in\">string</span> str, lstr, rstr;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cin</span>&gt;&gt;str;</span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"built_in\">stringstream</span> <span class=\"title\">ss</span><span class=\"params\">(str)</span></span>;</span><br><span class=\"line\">\t\tgetline(ss, lstr,<span class=\"string\">'='</span>); <span class=\"comment\">//得到等号左边的字符串 </span></span><br><span class=\"line\">\t\tgetline(ss, rstr); <span class=\"comment\">//得到等号右边的字符串 </span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t\tcalc(lstr, left); <span class=\"comment\">//计算左字符串 </span></span><br><span class=\"line\">\t\tcalc(rstr, right);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(judge(left, right)) <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"Y\"</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"N\"</span>&lt;&lt;<span class=\"built_in\">endl</span>; </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>部分用法解释：</p>\n<ul><li><p>C++ 中的 getline（）：getline（）函数的定义如下所示</p><ol><li>istream&amp; getline ( istream &amp;is , string &amp;str , char delim );</li></ol><p>​ 2. istream&amp; getline ( istream &amp;is , string &amp;str );</p><p>is 进行读入操作的输入流</p><p>str 用来存储读入的内容</p><p>delim 终结符，遇到该字符停止读取操作，不写的话默认为回车。</p><p>代码里用到<code>getline(ss, item, &#39;+&#39;)</code>，ss的定义是<code>stringstream ss(str)</code>，item是</p><p><code>string item</code>，这里的<code>str</code>是整个的等号左边或右边的式子，转成输入流，按加号分隔读入item。</p></li><li><p>访问map第二个元素的两种方式，一个是A[B]，一个是迭代器的second指针，这里在比较左右两边的某个元素是否个数相同时，用<code>if(right[it-&gt;first] != it-&gt;second)</code>。这里<code>it-&gt;first</code>是等号左边某个元素，<code>right[it-&gt;first]</code>访问到这个元素在右边的num，接着<code>it-&gt;second</code>是左边这个元素的num，比较是否相等即可。</p></li></ul><h4 id=\"201909-4-推荐系统\">201909-4 推荐系统<a href=\"#201909-4-推荐系统\" title=\"201909-4 推荐系统\"></a></h4><p><strong>题目</strong></p>\n<blockquote>\n<p>某电商有编号为 0 到 m-1 的 m 类商品，包括家电、汽车、电动车、面包、化妆品等。对于每个 app 新用户，每类商品初始有编号不同的 n 个商品，包括各个商家、品牌、供应商等。在任何时刻，同类的任意两个商品的编号各不相同，不同类的任意两个商品的编号可能相同。app 会给每个商品打分。初始时，各类商品的编号和得分都相同。在用户使用 app 时，会产生有效信息，包括喜欢、不喜欢等。app 会根据这些信息，在某类商品增加或删除商品。app 每次会推荐一部分商品给用户看。一个简单的想法是，选出各类所有商品中得分最大的若干商品。<br>该方法虽然简单，但是如果某类商品可能得分特别高，这种简单想法就无法保证推荐商品的多样性。因此，app 查询得分最大的若干商品，同时限制各类商品个数不能超过一个阅值。将上述过程抽象成 3 中操作：操作 1、2、3，分别对应增加、删除、查询操作：<br>1 type commodity score 表示在 type 类商品中增加编号为 commodity 的商品，该商品分数为 score\n2 type commodity 表示在 type 类商品中删除编号为 commodity 的商品。<br>3 k k_0 k_1 k_{m-1} 表示在各类所有商品中选出不超过 K 个（不一定要达到 K 个）得分最大的商品，同时第 i（0&lt;=i&lt;m）类商品的个数不超过 k_i。在查询时，如果第 a（0&lt;=a&lt;m）类商品中编号为 b 的商品和第 A（0&lt;=A&lt;m）类商品中编号为 B 的商品得分相同：<br>1，当 a=A 时，选取编号为 min（b，B）的商品；<br>2，当 a≠A 时，选取第 min（a，A）类商品。</p>\n</blockquote>\n<p><strong>输入</strong></p>\n<blockquote>\n<p>从标准输入读入数据。<br>输入的第一行包含两个正整数 m 和 n，保证 n&lt;=3x10^4 和 m&lt;=50.<br>接下来 n 行，每行两个正整数 id 和 score。第 1+j（1&lt;=j&lt;=n）行表示所有 m 类商品的第 j 个商品的编号和得分。<br>接下来一行包含一个正整数 opnum，表示操作总数，保证 n&lt;=10^5。其中，查询操作一共有 opask 个，保证 opask &lt;= 10^2.<br>接下来 opnum 行，每行若干个正整数，格式对应 1 type commodity score、2\ntype commodity、3 K k_0 k_1 … k_{m-1}，其中，K&lt;=10^2，k_0 k_1 … k_{m-1}&lt;=10^5.</p>\n</blockquote>\n<p><strong>输出</strong></p>\n<blockquote>\n<p>输出到标准输出。<br>输出共 opask×m，对应 opask 个查询操作。第 r×m+c，0&lt;=r&lt;opask，1&lt;=c&lt;=m 行表示，在第 r 个查询操作中，第 c 类商品选出的商品编号，同类商品的编号从小到大输出。如果 r 个查询操作中，第 c 类商品没有选出任何商品，则该行输出 - 1</p>\n</blockquote>\n<p><strong>输入样例</strong></p>\n<blockquote>\n<p>2 3<br>1 3<br>2 2<br>3 1<br>8  \n3 100 1 1<br>1 0 4 3<br>1 0 5 1<br>3 10 2 2<br>3 10 1 1<br>2 0 1<br>3 2 1 1<br>3 1 1 1</p>\n</blockquote>\n<p><strong>输出样例</strong></p>\n<blockquote>\n<p>1  \n1<br>1 4<br>1 2<br>1  \n1<br>4  \n1<br>4  \n-1</p>\n</blockquote>\n<p><strong>测试点</strong></p>\n<p><img src=\"https://s2.ax1x.com/2020/01/21/1kB1yV.png\" class=\"φcy\" alt=\"20191009220450688.png\"></p>\n<p><strong>解题思路</strong></p>\n<blockquote>\n<ol><li>灵活使用容器 set设计商品信息结构，用来存储商品的类型、编号和得分。设计删除信息结构，用来存储将要删除的商品的类型和编号。考虑到题目输出有序且执行大量查询操作，使用 set 来存储数据。</li><li>同时为了提高效率，实行惰性删除，即删除仅仅是指标记一个元素被删除，而不是整个清除它。在后续查询时先到Del中查看，如果在说明已被删除，直接跳过。不在的话就被选中，加入chosen[]。</li><li>chose[]是容器vector。chose[i]是第i类选中的商品的编号，可能有好几个int，打印时用迭代器it指向chose[i]，输出*it会自动在几个数字间加空格。</li></ol></blockquote>\n<p><strong>参考代码</strong>：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Goods</span>&#123;</span> <span class=\"comment\">//商品信息 </span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> type;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> id;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> score;</span><br><span class=\"line\"></span><br><span class=\"line\">\tGoods(<span class=\"keyword\">int</span> _type, <span class=\"keyword\">int</span> _id, <span class=\"keyword\">int</span> _score)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">\t\ttype=_type; id=_id; score=_score;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> &lt; (<span class=\"keyword\">const</span> Goods &amp;rhs) <span class=\"keyword\">const</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(score == rhs.score)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(type == rhs.type)    <span class=\"comment\">//同类同分数，选择编号小的</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> id &lt; rhs.id;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> type &lt; rhs.type; <span class=\"comment\">//不同类，选择类型数字小的</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> score &gt; rhs.score;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Del</span>&#123;</span>\t<span class=\"comment\">//已删除的商品信息 </span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> type;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> id;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tDel(<span class=\"keyword\">int</span> _type, <span class=\"keyword\">int</span> _id)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">\t\ttype=_type; id=_id;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> &lt; (<span class=\"keyword\">const</span> Del &amp;rhs) <span class=\"keyword\">const</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(type == rhs.type) <span class=\"keyword\">return</span> id &lt; rhs.id;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> type &lt; rhs.type;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">set</span>&lt;Goods&gt; goods; <span class=\"comment\">//存放所有商品信息 </span></span><br><span class=\"line\"><span class=\"built_in\">set</span>&lt;Del&gt; has_del; <span class=\"comment\">//存放所有已删除的商品信息 </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//全部设全局</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> m, n;</span><br><span class=\"line\"><span class=\"keyword\">int</span> id, score;</span><br><span class=\"line\"><span class=\"keyword\">int</span> opnum;</span><br><span class=\"line\"><span class=\"keyword\">int</span> type;</span><br><span class=\"line\"><span class=\"keyword\">int</span> K, k[<span class=\"number\">52</span>]; <span class=\"comment\">//k[i]:第i类商品中可选的最多个数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> cnt[<span class=\"number\">52</span>]; <span class=\"comment\">//计数，cnt[i]：第i类商品中已选数目， cnt[51]已选总数 </span></span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; chosen[<span class=\"number\">52</span>]; <span class=\"comment\">//输出每类选中的商品的编号 </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;m, &amp;n);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;id, &amp;score);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; m; ++j)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">\t\t\tgoods.insert(Goods(j, id, score));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;opnum);</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> op; <span class=\"comment\">//操作类型</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; opnum; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;op);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(op == <span class=\"number\">1</span>) <span class=\"comment\">//添加操作 </span></span><br><span class=\"line\">        &#123; </span><br><span class=\"line\">\t\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d\"</span>, &amp;type, &amp;id, &amp;score);</span><br><span class=\"line\">\t\t\tgoods.insert(Goods(type, id, score));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(op == <span class=\"number\">2</span>) <span class=\"comment\">//删除操作</span></span><br><span class=\"line\">        &#123;  </span><br><span class=\"line\">\t\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;type, &amp;id);</span><br><span class=\"line\">\t\t\thas_del.insert(Del(type, id)); <span class=\"comment\">//将该商品加入删除表中，实行惰性删除 </span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"comment\">//查询操作 </span></span><br><span class=\"line\">        &#123; </span><br><span class=\"line\">\t\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;K);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; m; ++j)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;k[j]);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">memset</span>(cnt, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(cnt));    <span class=\"comment\">//cnt清0</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; m; ++j)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                chosen[j].<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//搜索开始！ </span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"built_in\">set</span>&lt;Goods&gt;::iterator it=goods.<span class=\"built_in\">begin</span>(); cnt[<span class=\"number\">51</span>]&lt;K &amp;&amp; it!=goods.<span class=\"built_in\">end</span>();)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//该类商品未选满，查看该商品是否已删除 </span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(cnt[(*it).type]&lt;k[(*it).type])</span><br><span class=\"line\">                &#123;  </span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span>(has_del.<span class=\"built_in\">find</span>(Del((*it).type, (*it).id))!=has_del.<span class=\"built_in\">end</span>()) <span class=\"comment\">//存在于删除表中 </span></span><br><span class=\"line\">                    &#123; </span><br><span class=\"line\">\t\t\t\t\t\tgoods.erase(it++); <span class=\"comment\">//删除该元素，迭代器自增 </span></span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">//未删除 </span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">\t\t\t\t\t\t++cnt[(*it).type];</span><br><span class=\"line\">\t\t\t\t\t\t++cnt[<span class=\"number\">51</span>];</span><br><span class=\"line\">\t\t\t\t\t\tchosen[(*it).type].push_back((*it).id); </span><br><span class=\"line\">\t\t\t\t\t\tit++;</span><br><span class=\"line\">\t\t\t\t\t&#125; </span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">else</span> it++; </span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//输出！</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; m; ++j)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(cnt[j] == <span class=\"number\">0</span>)</span><br><span class=\"line\">                    <span class=\"built_in\">printf</span>(<span class=\"string\">\"-1\\n\"</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">for</span>(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;::iterator it=chosen[j].<span class=\"built_in\">begin</span>();it!=chosen[j].<span class=\"built_in\">end</span>(); ++it)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d \"</span>, *it);</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"\\n\"</span>);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125; </span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125; </span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>部分用法解释：</p>\n<ul><li><p><code>memset ()</code>函数</p><p><code>memset ()</code>函数原型是 <code>extern void *memset (void *buffer, int c, int count)</code></p><p>buffer：为指针或是数组，c：是赋给 buffer 的值，count：是 buffer 的长度。</p><p>如：<code>memset (buffer, 0, sizeof (buffer))</code></p><p><code>memset ()</code>用来对一段内存空间全部设置为某个字符，一般用在对定义的字符串进行初始化为</p><p>‘ ’或‘/0’；例: <code>char a [100];</code> <code>memset (a, ‘/0’, sizeof (a));</code></p></li></ul><h4 id=\"201812-4-数据中心\">201812-4 数据中心<a href=\"#201812-4-数据中心\" title=\"201812-4 数据中心\"></a></h4><p><strong>题目</strong></p>\n<p><img src=\"https://s2.ax1x.com/2020/01/28/1KXdw4.png\" class=\"φcy\" alt=\"https://s2.ax1x.com/2020/01/28/1KXdw4.png\"></p>\n<p><img src=\"https://s2.ax1x.com/2020/01/28/1Kvi8I.png\" class=\"φcy\" alt=\"https://s2.ax1x.com/2020/01/28/1Kvi8I.png\"></p>\n<p><strong>样例输入</strong></p>\n<blockquote>\n<p>4  \n5<br>1  \n1 2 3<br>1 3 4<br>1 4 5<br>2 3 8<br>3 4 2</p>\n</blockquote>\n<p><strong>样例输出</strong></p>\n<blockquote>\n<p>4</p>\n</blockquote>\n<p><strong>样例说明</strong></p>\n<p>　　下图是样例说明。</p>\n<p><img src=\"https://s2.ax1x.com/2020/01/28/1Kv8MV.png\" class=\"φcy\" alt=\"https://s2.ax1x.com/2020/01/28/1Kv8MV.png\"></p>\n<p><img src=\"https://i.loli.net/2020/01/28/rCbjc8Dol1UMpst.png\" class=\"φcy\" alt=\"https://i.loli.net/2020/01/28/rCbjc8Dol1UMpst.png\"></p>\n<p><strong>题目大意</strong></p>\n<blockquote>\n<p>给你一个由一些顶点、边、权值组成的无向连通图，从这个无向连通图中可以画出多种生成树，输入里指定根结点，最终要找到一种生成树画法，满足：<br>1、所有结点都与根结点连通<br>2、该树的处于同一深度上的边的最大权值记为 Th<br>3、该树的所有深度上的 Th 的最大值记为 Tmax<br>4、Tmax 是所有树结构中 Tmax 的最小值</p>\n</blockquote>\n<p><strong>解题思路</strong></p>\n<blockquote>\n<p>最终的Tmax是所有生成树的结构中Tmax最小的，所以尽量规避权重长的边被包括到树中，最终的树就是最小生成树。要输出的最小生成树的Tmax。</p>\n</blockquote>\n<p><strong>参考代码</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MAXN 50005</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Edge</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> v,u,t;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> &lt; (<span class=\"keyword\">const</span> Edge &amp;e) <span class=\"keyword\">const</span> &#123; <span class=\"comment\">//默认优先队列是大顶堆，这里指定排序方式，改为根据t排序的小顶堆</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> t &gt; e.t;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;Edge&gt; adj[MAXN]; <span class=\"comment\">//adj[v]:与顶点v相连的边</span></span><br><span class=\"line\">priority_queue&lt;Edge&gt; pq;    <span class=\"comment\">//优先队列，默认是大顶堆，存放已经访问过的结点的邻边</span></span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;Edge&gt; mst;   <span class=\"comment\">//最小生成树</span></span><br><span class=\"line\"><span class=\"keyword\">bool</span> vis[MAXN];   <span class=\"comment\">//访问标志</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Prim</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">visit</span><span class=\"params\">(<span class=\"keyword\">int</span> v)</span></span>;  <span class=\"comment\">//设置访问标志，并将与v相邻结点（未被访问）的边加入优先队列中</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Prim</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    visit(<span class=\"number\">1</span>);   <span class=\"comment\">//1号结点加入vis，与1相连的边加入pq</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!pq.empty())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Edge e = pq.top();  <span class=\"comment\">//最短边</span></span><br><span class=\"line\">        pq.pop();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(vis[e.v] &amp;&amp; vis[e.u])</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        mst.push_back(e);   <span class=\"comment\">//新的边加入最小生成树</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!vis[e.v])</span><br><span class=\"line\">            visit(e.v);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!vis[e.u])</span><br><span class=\"line\">            visit(e.u);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">visit</span><span class=\"params\">(<span class=\"keyword\">int</span> v)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    vis[v] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"built_in\">vector</span>&lt;Edge&gt;::iterator i=adj[v].<span class=\"built_in\">begin</span>(); i!=adj[v].<span class=\"built_in\">end</span>();i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!vis[(*i).u])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            pq.push(*i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n,m,root;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> v,u,t;</span><br><span class=\"line\">    Edge e;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; root;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; m;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span>&gt;&gt;v&gt;&gt;u&gt;&gt;t;</span><br><span class=\"line\">        e.v = v;</span><br><span class=\"line\">        e.u = u;</span><br><span class=\"line\">        e.t = t;</span><br><span class=\"line\">        adj[v].push_back(e);</span><br><span class=\"line\">        e.v = u;</span><br><span class=\"line\">        e.u = v;    <span class=\"comment\">//双向边</span></span><br><span class=\"line\">        adj[u].push_back(e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Prim(); <span class=\"comment\">//建最小生成树</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> TMAX = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"built_in\">vector</span>&lt;Edge&gt;::iterator i=mst.<span class=\"built_in\">begin</span>(); i!=mst.<span class=\"built_in\">end</span>(); i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        TMAX = TMAX &gt; (*i).t ? TMAX : (*i).t;   <span class=\"comment\">//选最大的T</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; TMAX &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>代码解释：</p>\n<ul><li>这里虽然说n &lt; 5 x 10^4，但是如果MAXN设成50000，得分只有70，设成50005就可以了。</li><li><code>priority_queue&lt;Edge&gt; pq</code>是优先队列，这里用默认声明方式，是大顶堆，不遵循先入先出，是根据权重出队列。如果这里的<code>Edge</code>是<code>int</code>，那么就是大的数字先出队列。这里在声明<code>Edge</code>时重载了小于号，并指定是<code>t &gt; e.t</code>，也就是改为t越小的先出队列。所以后面在普利姆算法部分<code>pq.top</code>是权重最小的边。</li></ul><h4 id=\"201809-3-元素选择器\">201809-3 元素选择器<a href=\"#201809-3-元素选择器\" title=\"201809-3 元素选择器\"></a></h4><p>一个字符串处理题，写一下心得。</p>\n<ul><li>使用<code>stringstream</code>来使接收的一整行字符串按空格分割逐个处理。</li></ul><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getline(<span class=\"built_in\">cin</span>,html);</span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">stringstream</span> <span class=\"title\">ss</span><span class=\"params\">(html)</span></span>;</span><br><span class=\"line\"><span class=\"built_in\">string</span> str;</span><br><span class=\"line\">ss &gt;&gt; str;  <span class=\"comment\">//str获取字符串空格前的部分</span></span><br></pre></td></tr></table></figure>\n\n<p>​        如果要一直将这行字符串进行按空格分割，逐部分处理，并直到结束，使用while循环</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"built_in\">stringstream</span> <span class=\"title\">ss</span><span class=\"params\">(css)</span></span>;</span><br><span class=\"line\"><span class=\"built_in\">string</span> str;</span><br><span class=\"line\"><span class=\"keyword\">while</span>(ss &gt;&gt; str)    <span class=\"comment\">//存储查询条件</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t…………</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul><li><p><code>string str.substr()</code>函数</p><p>有两种用法：</p></li></ul><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">string</span> s = “<span class=\"number\">0123456789</span>”</span><br><span class=\"line\"><span class=\"built_in\">string</span> sub1 = s.substr (<span class=\"number\">5</span>); <span class=\"comment\">// 只有一个数字 5 表示从下标为 5 开始一直到结尾：sub1 = “56789”</span></span><br><span class=\"line\"><span class=\"built_in\">string</span> sub2 = s.substr (<span class=\"number\">5</span>, <span class=\"number\">3</span>); <span class=\"comment\">// 从下标为 5 开始截取长度为 3 位：sub2 = “567”</span></span><br></pre></td></tr></table></figure>\n\n<ul><li><p><code>vector&lt;string&gt; :: reverse_iterator it = query.rbegin(); //反向迭代器</code></p><p>反向迭代器加1其实是倒着往前移：</p></li></ul><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iterator&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//创建并初始化一个 vector 容器</span></span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; myvector&#123; <span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span> &#125;;</span><br><span class=\"line\">    <span class=\"comment\">//创建并初始化一个反向迭代器</span></span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; :: reverse_iterator my_reiter = myvector.rbegin();</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; *my_reiter &lt;&lt; <span class=\"built_in\">endl</span>;<span class=\"comment\">// 8</span></span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; *(my_reiter + <span class=\"number\">3</span>) &lt;&lt; <span class=\"built_in\">endl</span>;<span class=\"comment\">// 5</span></span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; *(++my_reiter) &lt;&lt; <span class=\"built_in\">endl</span>;<span class=\"comment\">// 7</span></span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; my_reiter[<span class=\"number\">4</span>] &lt;&lt; <span class=\"built_in\">endl</span>;<span class=\"comment\">// 3</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">程序执行结果为：</span><br><span class=\"line\"><span class=\"number\">8</span></span><br><span class=\"line\"><span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"number\">7</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"201803-3-url-映射\">201803-3 URL 映射<a href=\"#201803-3-url-映射\" title=\"201803-3 URL 映射\"></a></h4><p><strong>笔记</strong></p>\n<ul><li><p>C++ <code>push</code> 方法与 <code>push_back</code> 方法：</p><p>push_back()：将一个新的元素加到 <strong>vector</strong> 的最后面</p><p>push()：</p><p>stack::push ();// 在栈顶增加元素</p><p>queue::push();// 将 x 接到队列的末端</p></li><li><p><code>strchr()</code>：</p><p><code>char *strchr(const char *str, int c)</code>在参数 <strong>str</strong> 所指向的字符串中搜索第一次出现字符 <strong>c</strong>（一个无符号字符）的位置，若没有这个字符返回NULL</p></li></ul><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"built_in\">strchr</span>(rule+j,<span class=\"string\">'/'</span>) != <span class=\"literal\">NULL</span>)  <span class=\"comment\">//从rule+j开始往后第一个出现/的地方</span></span><br><span class=\"line\">    j = <span class=\"built_in\">strchr</span>(rule+j,<span class=\"string\">'/'</span>) - rule;</span><br></pre></td></tr></table></figure>\n\n\n<ul><li><p><code>strstr()</code>：</p><p><code>strstr (str1,str2)</code> 函数用于判断字符串 str2 是否是 str1 的子串。如果是，则该函数返回 str2 在 str1 中首次出现的地址；否则，返回 NULL。</p></li><li><p><code>c_str()</code>：作用是 string--&gt;char*</p></li></ul><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"%s \"</span>,value[j].c_str());\t<span class=\"comment\">//value[j]是string，转成char*</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"201803-4-棋局评估\">201803-4 棋局评估<a href=\"#201803-4-棋局评估\" title=\"201803-4 棋局评估\"></a></h4><p><strong>题目</strong></p>\n<blockquote>\n<p>Alice 和 Bob 正在玩井字棋游戏。<br>井字棋游戏的规则很简单：两人轮流往 3*3 的棋盘中放棋子，Alice 放的是 “X”，Bob 放的是 “O”，Alice 执先。当同一种棋子占据一行、一列或一条对角线的三个格子时，游戏结束，该种棋子的持有者获胜。当棋盘被填满的时候，游戏结束，双方平手。<br>Alice 设计了一种对棋局评分的方法：<br>- 对于 Alice 已经获胜的局面，评估得分为 (棋盘上的空格子数 + 1)；<br>- 对于 Bob 已经获胜的局面，评估得分为 -(棋盘上的空格子数 + 1)；<br>- 对于平局的局面，评估得分为 0；</p>\n<img src=\"https://s2.ax1x.com/2020/01/31/13pemR.png\" alt=\"https://s2.ax1x.com/2020/01/31/13pemR.png\">\n\n<p>例如上图中的局面，Alice 已经获胜，同时棋盘上有 2 个空格，所以局面得分为 2+1=3。<br>由于 Alice 并不喜欢计算，所以他请教擅长编程的你，如果两人都以最优策略行棋，那么当前局面的最终得分会是多少？</p>\n</blockquote>\n<p><strong>输入</strong></p>\n<blockquote>\n<p>输入的第一行包含一个正整数 T，表示数据的组数。<br>每组数据输入有 3 行，每行有 3 个整数，用空格分隔，分别表示棋盘每个格子的状态。0 表示格子为空，1 表示格子中为 “X”，2 表示格子中为 “O”。保证不会出现其他状态。<br>保证输入的局面合法。(即保证输入的局面可以通过行棋到达，且保证没有双方同时获胜的情况)<br>保证输入的局面轮到 Alice 行棋。</p>\n</blockquote>\n<p><strong>输出</strong></p>\n<blockquote>\n<p>对于每组数据，输出一行一个整数，表示当前局面的得分。</p>\n</blockquote>\n<p><strong>输入样例</strong></p>\n<blockquote>\n<p>3  \n1 2 1<br>2 1 2<br>0 0 0<br>2 1 1<br>0 2 1<br>0 0 2<br>0 0 0<br>0 0 0<br>0 0 0</p>\n</blockquote>\n<p><strong>输出样例</strong></p>\n<blockquote>\n<p>3  \n-4<br>0</p>\n</blockquote>\n<p><strong>样例说明</strong></p>\n<blockquote>\n<p>第一组数据：<br>Alice 将棋子放在左下角 (或右下角) 后，可以到达问题描述中的局面，得分为 3。<br>3 为 Alice 行棋后能到达的局面中得分的最大值。<br>第二组数据：</p>\n<p><img src=\"https://s2.ax1x.com/2020/01/31/13pt0I.png\" alt=\"https://s2.ax1x.com/2020/01/31/13pt0I.png\"></p>\n<p>Bob 已经获胜 (如图)，此局面得分为 -(3+1)=-4。<br>第三组数据：<br>井字棋中若双方都采用最优策略，游戏平局，最终得分为 0。</p>\n</blockquote>\n<p><strong>数据规模和约定</strong></p>\n<p>对于所有评测用例，1 ≤ T ≤ 5。</p>\n<p><strong>参考代码</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> INF 0X3F3F3F3F</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> arr[<span class=\"number\">3</span>][<span class=\"number\">3</span>];  <span class=\"comment\">//1 Alice &amp;&amp; 2 Bob</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//判断玩家V是否获胜</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">judge</span><span class=\"params\">(<span class=\"keyword\">int</span> v)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; <span class=\"number\">3</span>;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(arr[i][<span class=\"number\">0</span>] == v &amp;&amp; arr[i][<span class=\"number\">1</span>] == v &amp;&amp; arr[i][<span class=\"number\">2</span>] == v)  <span class=\"comment\">//连成一行</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(arr[<span class=\"number\">0</span>][i] == v &amp;&amp; arr[<span class=\"number\">1</span>][i] == v &amp;&amp; arr[<span class=\"number\">2</span>][i] == v)  <span class=\"comment\">//连成一列</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//对角线</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(arr[<span class=\"number\">0</span>][<span class=\"number\">0</span>] == v &amp;&amp; arr[<span class=\"number\">1</span>][<span class=\"number\">1</span>] == v &amp;&amp; arr[<span class=\"number\">2</span>][<span class=\"number\">2</span>] == v)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(arr[<span class=\"number\">0</span>][<span class=\"number\">2</span>] == v &amp;&amp; arr[<span class=\"number\">1</span>][<span class=\"number\">1</span>] == v &amp;&amp; arr[<span class=\"number\">2</span>][<span class=\"number\">0</span>] == v)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> v)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; <span class=\"number\">3</span>;i++)    <span class=\"comment\">//计算空格数</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>;j &lt; <span class=\"number\">3</span>;j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(arr[i][j] == <span class=\"number\">0</span>)</span><br><span class=\"line\">                count++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(v == <span class=\"number\">1</span> &amp;&amp; judge(<span class=\"number\">2</span>))  <span class=\"keyword\">return</span> -count<span class=\"number\">-1</span>;    <span class=\"comment\">//轮到Alice，但当前局面Bob已经获胜</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(v == <span class=\"number\">2</span> &amp;&amp; judge(<span class=\"number\">1</span>))  <span class=\"keyword\">return</span> count+<span class=\"number\">1</span>;     <span class=\"comment\">//轮到Bob，但当前局面Alice已经获胜</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(count == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;    <span class=\"comment\">//平局</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> mn = INF, mx = -INF;    <span class=\"comment\">//初始化最大值和最小值</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; <span class=\"number\">3</span>;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>;j &lt; <span class=\"number\">3</span>;j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(arr[i][j] == <span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                arr[i][j] = v; <span class=\"comment\">//填充空格</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(v == <span class=\"number\">1</span>) mx = <span class=\"built_in\">max</span>(mx,dfs(<span class=\"number\">2</span>)); <span class=\"comment\">//alice选择下一步最优的解</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(v == <span class=\"number\">2</span>) mn = <span class=\"built_in\">min</span>(mn,dfs(<span class=\"number\">1</span>));</span><br><span class=\"line\">                arr[i][j] = <span class=\"number\">0</span>; <span class=\"comment\">//恢复当前局面，尝试填充下一个空格</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//当前局面无获胜</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(v == <span class=\"number\">1</span>) <span class=\"keyword\">return</span> mx;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(v == <span class=\"number\">2</span>) <span class=\"keyword\">return</span> mn;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> T;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; T;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(T--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; <span class=\"number\">3</span>;i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>;j &lt; <span class=\"number\">3</span>;j++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">cin</span> &gt;&gt; arr[i][j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; dfs(<span class=\"number\">1</span>) &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>代码解释：</p>\n<ul><li>用max()和min()函数要引用头文件<code>#include&lt;algorithm&gt;</code></li><li>双方都遵循最优策略，所以不管是A还是B，每下一步都深度优先搜索，看这一步会不会取得得分最大值。</li></ul><h4 id=\"201712-3-crontab\">201712-3 Crontab<a href=\"#201712-3-crontab\" title=\"201712-3 Crontab\"></a></h4><p><strong>笔记</strong>：</p>\n<ul><li><p>根据年月日得到是星期几的函数</p></li><li><p><code>isdigit(str[i])</code>判断是不是数字，<code>isalpha(str[i])</code>判断是不是字母，头文件<code>ctype.h</code></p></li><li><p><code>unique()</code>：头文件要加<code>#include &lt;algorithm&gt;</code></p><p>返回的是 a 去重后的尾地址，不真正把重复的元素删除，其实是把重复的元素移到后面去了，然后依然保存到了原数组中，然后返回去重后最后一个元素的地址，因为 unique 去除的是相邻的重复元素，<strong>所以一般用之前都会要排一下序</strong>，a 必须是有序的。</p></li></ul><h4 id=\"201712-4-行车路线\">201712-4 行车路线<a href=\"#201712-4-行车路线\" title=\"201712-4 行车路线\"></a></h4><p><strong>题目</strong></p>\n<blockquote>\n<p>小明和小芳出去乡村玩，小明负责开车，小芳来导航。<br>小芳将可能的道路分为大道和小道。大道比较好走，每走 1 公里小明会增加 1 的疲劳度。小道不好走，如果连续走小道，小明的疲劳值会快速增加，连续走 <em>s</em> 公里小明会增加 <em>s</em>2 的疲劳度。<br>例如：有 5 个路口，1 号路口到 2 号路口为小道，2 号路口到 3 号路口为小道，3 号路口到 4 号路口为大道，4 号路口到 5 号路口为小道，相邻路口之间的距离都是 2 公里。如果小明从 1 号路口到 5 号路口，则总疲劳值为 (2+2)2+2+22=16+2+4=22。<br>现在小芳拿到了地图，请帮助她规划一个开车的路线，使得按这个路线开车小明的疲劳度最小。</p>\n</blockquote>\n<p><strong>输入</strong></p>\n<blockquote>\n<p>输入的第一行包含两个整数 <em>n</em>, <em>m</em>，分别表示路口的数量和道路的数量。路口由 1 至 <em>n</em> 编号，小明需要开车从 1 号路口到 <em>n</em> 号路口。<br>接下来 <em>m</em> 行描述道路，每行包含四个整数 <em>t</em>, <em>a</em>, <em>b</em>, <em>c</em>，表示一条类型为 <em>t</em>，连接 <em>a</em> 与 <em>b</em> 两个路口，长度为 <em>c</em> 公里的双向道路。其中 <em>t</em> 为 0 表示大道，<em>t</em> 为 1 表示小道。保证 1 号路口和 <em>n</em> 号路口是连通的。</p>\n</blockquote>\n<p><strong>输出</strong></p>\n<blockquote>\n<p>输出一个整数，表示最优路线下小明的疲劳度。</p>\n</blockquote>\n<p><strong>样例输入</strong></p>\n<blockquote>\n<p>6 7<br>1 1 2 3<br>1 2 3 2<br>0 1 3 30<br>0 3 4 20<br>0 4 5 30<br>1 3 5 6<br>1 5 6 1</p>\n</blockquote>\n<p><strong>样例输出</strong></p>\n<blockquote>\n<p>76</p>\n</blockquote>\n<p><strong>样例说明</strong></p>\n<blockquote>\n<p>从 1 走小道到 2，再走小道到 3，疲劳度为 52=25；然后从 3 走大道经过 4 到达 5，疲劳度为 20+30=50；最后从 5 走小道到 6，疲劳度为 1。总共为 76。</p>\n</blockquote>\n<p><strong>数据规模和约定</strong></p>\n<blockquote>\n<p>对于 30% 的评测用例，1 ≤ <em>n</em> ≤ 8，1 ≤ <em>m</em> ≤ 10；<br>对于另外 20% 的评测用例，不存在小道；<br>对于另外 20% 的评测用例，所有的小道不相交；<br>对于所有评测用例，1 ≤ <em>n</em> ≤ 500，1 ≤ <em>m</em> ≤ 105，1 ≤ <em>a</em>, <em>b</em> ≤ <em>n</em>，<em>t</em> 是 0 或 1，<em>c</em> ≤ 105。保证答案不超过 106。</p>\n</blockquote>\n<p><strong>参考代码</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> n,m,t,a,b,c;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt;n &gt;&gt;m;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">long</span> <span class=\"keyword\">long</span>&gt;&gt; <span class=\"title\">adj</span><span class=\"params\">(n+<span class=\"number\">1</span>, <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">long</span> <span class=\"keyword\">long</span>&gt;())</span></span>;    <span class=\"comment\">//创建邻接表，是n+1个空的vector&lt;long long&gt;,adj也是vector</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> i = <span class=\"number\">0</span>;i &lt; m;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; t &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class=\"line\">        adj[a].push_back(b);</span><br><span class=\"line\">        adj[a].push_back(c);</span><br><span class=\"line\">        adj[a].push_back(t);</span><br><span class=\"line\">        adj[b].push_back(a);</span><br><span class=\"line\">        adj[b].push_back(c);</span><br><span class=\"line\">        adj[b].push_back(t);    <span class=\"comment\">//每个adj[i]一次存放三个信息，邻接点，距离，是否大路</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">long</span> <span class=\"keyword\">long</span>&gt; <span class=\"title\">dist</span><span class=\"params\">(n+<span class=\"number\">1</span>, <span class=\"number\">1000000</span>)</span></span>;    <span class=\"comment\">//原点到某点距离,初始化n+1个1000000</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">bool</span>&gt; <span class=\"title\">inS</span><span class=\"params\">(n+<span class=\"number\">1</span>, <span class=\"literal\">false</span>)</span></span>;   <span class=\"comment\">//初始化都不在S集中</span></span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">long</span> <span class=\"keyword\">long</span>&gt; temp;</span><br><span class=\"line\"></span><br><span class=\"line\">    temp.push_back(<span class=\"number\">-1</span>);</span><br><span class=\"line\">    temp.push_back(<span class=\"number\">0</span>);</span><br><span class=\"line\">    temp.push_back(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"function\"><span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">long</span> <span class=\"keyword\">long</span>&gt;&gt; <span class=\"title\">pre</span><span class=\"params\">(n+<span class=\"number\">1</span>,temp)</span></span>;    <span class=\"comment\">//记录前序结点，与adj[i]的三个信息同步，pre[i]是结点i的前序结点</span></span><br><span class=\"line\"></span><br><span class=\"line\">    inS[<span class=\"number\">1</span>] = <span class=\"literal\">true</span>;  <span class=\"comment\">//第一个点加入S集</span></span><br><span class=\"line\">    dist[<span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    pre[<span class=\"number\">1</span>][<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> i = <span class=\"number\">0</span>;i &lt; adj[<span class=\"number\">1</span>].<span class=\"built_in\">size</span>();i += <span class=\"number\">3</span>)   <span class=\"comment\">//遍历第一个点的邻接点</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(adj[<span class=\"number\">1</span>][i+<span class=\"number\">2</span>] == <span class=\"number\">0</span>)    <span class=\"comment\">//到某一个邻接点是大道</span></span><br><span class=\"line\">            dist[adj[<span class=\"number\">1</span>][i]] = adj[<span class=\"number\">1</span>][i+<span class=\"number\">1</span>];  <span class=\"comment\">//第一个点到邻接点adj[1][i]</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>    <span class=\"comment\">//小道</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            dist[adj[<span class=\"number\">1</span>][i]] = adj[<span class=\"number\">1</span>][i+<span class=\"number\">1</span>] * adj[<span class=\"number\">1</span>][i+<span class=\"number\">1</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//修改原点邻接点的pre信息</span></span><br><span class=\"line\">        pre[adj[<span class=\"number\">1</span>][i]][<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        pre[adj[<span class=\"number\">1</span>][i]][<span class=\"number\">1</span>] = adj[<span class=\"number\">1</span>][i+<span class=\"number\">1</span>];</span><br><span class=\"line\">        pre[adj[<span class=\"number\">1</span>][i]][<span class=\"number\">2</span>] = adj[<span class=\"number\">1</span>][i+<span class=\"number\">2</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> source;   <span class=\"comment\">//记录下一个距离最短点的序号</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!inS[n])  <span class=\"comment\">//不在S集中</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> mindis = <span class=\"number\">1000000</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> i = <span class=\"number\">1</span>;i &lt;= n;i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!inS[i] &amp;&amp; dist[i] &lt; mindis) <span class=\"comment\">//不在S集中并且到原点的距离更小</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                mindis = dist[i];</span><br><span class=\"line\">                source = i;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        inS[source] = <span class=\"literal\">true</span>; <span class=\"comment\">//将距离最小点加入S集</span></span><br><span class=\"line\">        <span class=\"comment\">//更新新加入点的邻接点信息</span></span><br><span class=\"line\">        <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> <span class=\"built_in\">size</span> = adj[source].<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> i = <span class=\"number\">0</span>;i &lt; <span class=\"built_in\">size</span>;i += <span class=\"number\">3</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!inS[adj[source][i]])    <span class=\"comment\">//它的邻接点不在S集中</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> dist2i;   <span class=\"comment\">//原点到新邻接点距离</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(adj[source][i+<span class=\"number\">2</span>] == <span class=\"number\">0</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    dist2i = dist[source] + adj[source][i+<span class=\"number\">1</span>];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> prenode = source; <span class=\"comment\">//prenode记录目前追溯到的最前面的小道开始节点</span></span><br><span class=\"line\">                    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> sdis = adj[source][i+<span class=\"number\">1</span>]; <span class=\"comment\">//向前追溯，小道总长</span></span><br><span class=\"line\">                    <span class=\"keyword\">while</span>(<span class=\"literal\">true</span>)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(pre[prenode][<span class=\"number\">0</span>] != prenode &amp;&amp; pre[prenode][<span class=\"number\">2</span>] == <span class=\"number\">1</span>)</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            sdis += pre[prenode][<span class=\"number\">1</span>];</span><br><span class=\"line\">                            prenode = pre[prenode][<span class=\"number\">0</span>]; </span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"keyword\">else</span> <span class=\"keyword\">break</span>; <span class=\"comment\">//往前追溯到的前序节点是大道开始节点</span></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    dist2i = dist[prenode] + sdis * sdis;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(dist2i &lt; dist[adj[source][i]])   <span class=\"comment\">//判断是否更短，要更新</span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    dist[adj[source][i]] = dist2i;</span><br><span class=\"line\">                    pre[adj[source][i]][<span class=\"number\">0</span>] = source;</span><br><span class=\"line\">                    pre[adj[source][i]][<span class=\"number\">1</span>] = adj[source][i+<span class=\"number\">1</span>];</span><br><span class=\"line\">                    pre[adj[source][i]][<span class=\"number\">2</span>] = adj[source][i+<span class=\"number\">2</span>];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; dist[n];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"201709-4-通信网络\">201709-4 通信网络<a href=\"#201709-4-通信网络\" title=\"201709-4 通信网络\"></a></h4><p><strong>题目</strong></p>\n<blockquote>\n<p>某国的军队由 <em>N</em> 个部门组成，为了提高安全性，部门之间建立了 <em>M</em> 条通路，每条通路只能单向传递信息，即一条从部门 <em>a</em> 到部门 <em>b</em> 的通路只能由 <em>a</em> 向 <em>b</em> 传递信息。信息可以通过中转的方式进行传递，即如果 <em>a</em> 能将信息传递到 <em>b</em>，<em>b</em> 又能将信息传递到 <em>c</em>，则 <em>a</em> 能将信息传递到 <em>c</em>。一条信息可能通过多次中转最终到达目的地。\n由于保密工作做得很好，并不是所有部门之间都互相知道彼此的存在。只有当两个部门之间可以直接或间接传递信息时，他们才彼此知道对方的存在。部门之间不会把自己知道哪些部门告诉其他部门。</p>\n<p><img src=\"https://s2.ax1x.com/2020/02/04/1BMXXq.png\" alt=\"https://s2.ax1x.com/2020/02/04/1BMXXq.png\"></p>\n<p>上图中给了一个 4 个部门的例子，图中的单向边表示通路。部门 1 可以将消息发送给所有部门，部门 4 可以接收所有部门的消息，所以部门 1 和部门 4 知道所有其他部门的存在。部门 2 和部门 3 之间没有任何方式可以发送消息，所以部门 2 和部门 3 互相不知道彼此的存在。<br>现在请问，有多少个部门知道所有 <em>N</em> 个部门的存在。或者说，有多少个部门所知道的部门数量（包括自己）正好是 <em>N</em>。</p>\n</blockquote>\n<p><strong>输入格式</strong></p>\n<blockquote>\n<p>输入的第一行包含两个整数 <em>N</em>, <em>M</em>，分别表示部门的数量和单向通路的数量。所有部门从 1 到 <em>N</em> 标号。<br>接下来 <em>M</em> 行，每行两个整数 <em>a</em>, <em>b</em>，表示部门 <em>a</em> 到部门 <em>b</em> 有一条单向通路。</p>\n</blockquote>\n<p><strong>输出格式</strong></p>\n<blockquote>\n<p>输出一行，包含一个整数，表示答案。</p>\n</blockquote>\n<p><strong>样例输入</strong></p>\n<blockquote>\n<p>4 4\n1 2\n1 3\n2 4\n3 4</p>\n</blockquote>\n<p><strong>样例输出</strong></p>\n<blockquote>\n<p>2</p>\n</blockquote>\n<p><strong>样例说明</strong></p>\n<blockquote>\n<p>部门 1 和部门 4 知道所有其他部门的存在。</p>\n</blockquote>\n<p><strong>评测用例规模与约定</strong></p>\n<blockquote>\n<p>对于 30% 的评测用例，1 ≤ <em>N</em> ≤ 10，1 ≤ <em>M</em> ≤ 20；<br>对于 60% 的评测用例，1 ≤ <em>N</em> ≤ 100，1 ≤ <em>M</em> ≤ 1000；<br>对于 100% 的评测用例，1 ≤ <em>N</em> ≤ 1000，1 ≤ <em>M</em> ≤ 10000。</p>\n</blockquote>\n<p><strong>参考代码</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MAXN 1005</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt; <span class=\"title\">adj</span><span class=\"params\">(MAXN, <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;())</span></span>;    <span class=\"comment\">//创建邻接表，是n+1个空的vector&lt;int&gt;,adj也是vector</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> visited[MAXN];  <span class=\"comment\">//记录每次深度优先遍历中该点是否已经遍历</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> reach[MAXN][MAXN];  <span class=\"comment\">//reach[a][b] =1表示a知道b。=0表示a不知道b。</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> cur,<span class=\"keyword\">int</span> sta)</span>   <span class=\"comment\">//cur:现在的出发点，sta：本次for循环的起点</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    visited[cur] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    reach[sta][cur] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    reach[cur][sta] = <span class=\"number\">1</span>;    <span class=\"comment\">//两点互相知道</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;::iterator i=adj[cur].<span class=\"built_in\">begin</span>();i != adj[cur].<span class=\"built_in\">end</span>();i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(visited[*i] == <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            dfs(*i,sta);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n,m,a,b;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; m;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class=\"line\">        adj[a].push_back(b);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>;i &lt;= n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(visited,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(visited));</span><br><span class=\"line\">        dfs(i,i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>;i &lt;= n;i++)    <span class=\"comment\">//数有几个点知道的点数是n</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> j;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(j = <span class=\"number\">1</span>;j &lt;= n;j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(reach[i][j] == <span class=\"number\">0</span>)    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(j == n+<span class=\"number\">1</span>)    <span class=\"comment\">//上面的for循环进行完了，没有break，说明i知道每个j</span></span><br><span class=\"line\">            ans++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; ans;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>代码解释:</p>\n<ul><li>依然是邻接表形式的图。因为间接访问也算互相知道，所以依次从每个点开始遍历图，每次遍历到一个点都将这个点与起始点记录为互相知道。</li></ul><h4 id=\"201703-4-地铁修建\">201703-4 地铁修建<a href=\"#201703-4-地铁修建\" title=\"201703-4 地铁修建\"></a></h4><p><strong>题目：</strong></p>\n<blockquote>\n<p>A 市有 n 个交通枢纽，其中 1 号和 n 号非常重要，为了加强运输能力，A 市决定在 1 号到 n 号枢纽间修建一条地铁。<br>地铁由很多段隧道组成，每段隧道连接两个交通枢纽。经过勘探，有 m 段隧道作为候选，两个交通枢纽之间最多只有一条候选的隧道，没有隧道两端连接着同一个交通枢纽。<br>现在有 n 家隧道施工的公司，每段候选的隧道只能由一个公司施工，每家公司施工需要的天数一致。而每家公司最多只能修建一条候选隧道。所有公司同时开始施工。<br>作为项目负责人，你获得了候选隧道的信息，现在你可以按自己的想法选择一部分隧道进行施工，请问修建整条地铁最少需要多少天。</p>\n</blockquote>\n<p><strong>输入：</strong></p>\n<blockquote>\n<p>输入的第一行包含两个整数 n, m，用一个空格分隔，分别表示交通枢纽的数量和候选隧道的数量。<br>第 2 行到第 m+1 行，每行包含三个整数 a, b, c，表示枢纽 a 和枢纽 b 之间可以修建一条隧道，需要的时间为 c 天。</p>\n</blockquote>\n<p><strong>输出</strong>：</p>\n<blockquote>\n<p>输出一个整数，修建整条地铁线路最少需要的天数。</p>\n</blockquote>\n<p><strong>输入样例：</strong></p>\n<blockquote>\n<p>6 6<br>1 2 4<br>2 3 4<br>3 6 7<br>1 4 2<br>4 5 5<br>5 6 6</p>\n</blockquote>\n<p><strong>输出样例：</strong></p>\n<blockquote>\n<p>6</p>\n</blockquote>\n<p><strong>样例说明</strong></p>\n<blockquote>\n<p>可以修建的线路有两种。 \n第一种经过的枢纽依次为 1, 2, 3, 6，所需要的时间分别是 4, 4, 7，则整条地铁线需要 7 天修完； \n第二种经过的枢纽依次为 1, 4, 5, 6，所需要的时间分别是 2, 5, 6，则整条地铁线需要 6 天修完。 \n第二种方案所用的天数更少。</p>\n</blockquote>\n<p><strong>提示</strong></p>\n<blockquote>\n<p>对于 20% 的评测用例，1 ≤ n ≤ 10，1 ≤ m ≤ 20； \n对于 40% 的评测用例，1 ≤ n ≤ 100，1 ≤ m ≤ 1000； \n对于 60% 的评测用例，1 ≤ n ≤ 1000，1 ≤ m ≤ 10000，1 ≤ c ≤ 1000； \n对于 80% 的评测用例，1 ≤ n ≤ 10000，1 ≤ m ≤ 100000； \n对于 100% 的评测用例，1 ≤ n ≤ 100000，1 ≤ m ≤ 200000，1 ≤ a, b ≤ n，1 ≤ c ≤ 1000000。 \n所有评测用例保证在所有候选隧道都修通时 1 号枢纽可以通过隧道到达其他所有枢纽。</p>\n</blockquote>\n<p><strong>解题思路：</strong></p>\n<blockquote>\n<p>对迪杰斯特拉求最短路径做稍稍改变，把更新到起始点的距离改成更新到起始点的几段中最长一段要花的天数。</p>\n</blockquote>\n<p><strong>参考代码</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> INF 0x3f3f3f3f</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MAXN 100005</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Edge</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> from,to,dist;   <span class=\"comment\">//每一段的起点，终点，距离</span></span><br><span class=\"line\">    Edge(<span class=\"keyword\">int</span> u,<span class=\"keyword\">int</span> v,<span class=\"keyword\">int</span> d):from(u),to(v),dist(d)&#123;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">HeapNode</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> day,u;    <span class=\"comment\">//u点到起始点的几段中最长一段要花的天数</span></span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> &lt; (<span class=\"keyword\">const</span> HeapNode&amp; rhs) <span class=\"keyword\">const</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> day &gt; rhs.day;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;Edge&gt; edge;  </span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; G[MAXN];    <span class=\"comment\">//G[i]中的若干个int是几条从结点i出发的边的序号</span></span><br><span class=\"line\"><span class=\"keyword\">bool</span> visited[MAXN];</span><br><span class=\"line\"><span class=\"keyword\">int</span> day[MAXN];</span><br><span class=\"line\"><span class=\"keyword\">int</span> n,m;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">addEdge</span><span class=\"params\">(<span class=\"keyword\">int</span> from,<span class=\"keyword\">int</span> to,<span class=\"keyword\">int</span> dist)</span></span>&#123;</span><br><span class=\"line\">    edge.push_back(Edge(from,to,dist));</span><br><span class=\"line\">    G[from].push_back(edge.size()<span class=\"number\">-1</span>);   <span class=\"comment\">//添加edge[0]这条边的时候，edge.size是1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dijkstra</span><span class=\"params\">(<span class=\"keyword\">int</span> s)</span></span>&#123;</span><br><span class=\"line\">    priority_queue&lt;HeapNode&gt; Q;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; n;i++)</span><br><span class=\"line\">        day[i] = INF;</span><br><span class=\"line\">    day[s] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(visited,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(visited));</span><br><span class=\"line\">    Q.push((HeapNode)&#123;<span class=\"number\">0</span>,s&#125;);    <span class=\"comment\">//把&#123;0,s&#125;作为HeapNode的两个参数,s是起始点，到自己的day是0</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!Q.empty())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        HeapNode x = Q.top();</span><br><span class=\"line\">        Q.pop();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> u = x.u;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(visited[u])  <span class=\"keyword\">continue</span>;   <span class=\"comment\">//已经访问过</span></span><br><span class=\"line\">        visited[u] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; G[u].size();i++)  <span class=\"comment\">//遍历从u出发的边</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Edge&amp; e = edge[G[u][i]];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(day[e.to] &gt; max(day[u],e.dist))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                day[e.to] = max(day[u],e.dist);</span><br><span class=\"line\">                Q.push((HeapNode)&#123;day[e.to],e.to&#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> u,v,d;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; m;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; u &gt;&gt; v &gt;&gt; d;</span><br><span class=\"line\">        addEdge(u<span class=\"number\">-1</span>,v<span class=\"number\">-1</span>,d);</span><br><span class=\"line\">        addEdge(v<span class=\"number\">-1</span>,u<span class=\"number\">-1</span>,d);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    dijkstra(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; day[n<span class=\"number\">-1</span>];   <span class=\"comment\">//终点n到起点0的日子</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"201609-4-交通规划\">201609-4 交通规划<a href=\"#201609-4-交通规划\" title=\"201609-4 交通规划\"></a></h4><p><strong>题目：</strong></p>\n<blockquote>\n<p>G 国国王来中国参观后，被中国的高速铁路深深的震撼，决定为自己的国家也建设一个高速铁路系统。<br>建设高速铁路投入非常大，为了节约建设成本，G 国国王决定不新建铁路，而是将已有的铁路改造成高速铁路。现在，请你为 G 国国王提供一个方案，将现有的一部分铁路改造成高速铁路，使得任何两个城市间都可以通过高速铁路到达，而且从所有城市乘坐高速铁路到首都的最短路程和原来一样长。请你告诉 G 国国王在这些条件下最少要改造多长的铁路。</p>\n</blockquote>\n<p><strong>输入：</strong></p>\n<blockquote>\n<p>输入的第一行包含两个整数 <em>n</em>, <em>m</em>，分别表示 G 国城市的数量和城市间铁路的数量。所有的城市由 1 到 <em>n</em> 编号，首都为 1 号。<br>接下来 <em>m</em> 行，每行三个整数 <em>a</em>, <em>b</em>, <em>c</em>，表示城市 <em>a</em> 和城市 <em>b</em> 之间有一条长度为 <em>c</em> 的双向铁路。这条铁路不会经过 <em>a</em> 和 <em>b</em> 以外的城市。</p>\n</blockquote>\n<p><strong>输出：</strong></p>\n<blockquote>\n<p>输出一行，表示在满足条件的情况下最少要改造的铁路长度。</p>\n</blockquote>\n<p><strong>样例输入：</strong></p>\n<blockquote>\n<p>4 5<br>1 2 4<br>1 3 5<br>2 3 2<br>2 4 3<br>3 4 2 </p>\n</blockquote>\n<p><strong>样例输出</strong></p>\n<blockquote>\n<p>11</p>\n</blockquote>\n<p><strong>评测用例规模与约定</strong></p>\n<blockquote>\n<p>对于 20% 的评测用例，1 ≤ <em>n</em> ≤ 10，1 ≤ <em>m</em> ≤ 50；<br>对于 50% 的评测用例，1 ≤ <em>n</em> ≤ 100，1 ≤ <em>m</em> ≤ 5000；<br>对于 80% 的评测用例，1 ≤ <em>n</em> ≤ 1000，1 ≤ <em>m</em> ≤ 50000；<br>对于 100% 的评测用例，1 ≤ <em>n</em> ≤ 10000，1 ≤ <em>m</em> ≤ 100000，1 ≤ <em>a</em>, <em>b</em> ≤ n，1 ≤ <em>c</em> ≤ 1000。输入保证每个城市都可以通过铁路达到首都。</p>\n</blockquote>\n<p><strong>解题思路：</strong></p>\n<blockquote>\n<p>首先想到用迪杰斯特拉算法，但是在更新结点到首都的距离时，即使最短距离和原来一样，也要考虑是不是改造的总长度更短。例如在输入样例中，到点4有两条路，1-2-4和1-3-4，总距离都是7，但是当1-2和1-3这两条路都要改造时，显然改造3-4这条路代价更小。用cost[]数组记录每个点更新距离时，自己到前一个点的边长。</p>\n</blockquote>\n<p><strong>参考代码：</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> INF 0x3f3f3f3f</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MAXN 10005</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Edge</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> from,to,dist;    <span class=\"comment\">//每一段的起点，终点，距离</span></span><br><span class=\"line\">    Edge(<span class=\"keyword\">int</span> u,<span class=\"keyword\">int</span> v,<span class=\"keyword\">int</span> d):from(u),to(v),dist(d)&#123;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">HeapNode</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> dis,u;  <span class=\"comment\">//点u到首都的距离dis</span></span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> &lt; (<span class=\"keyword\">const</span> HeapNode&amp; rhs)   <span class=\"keyword\">const</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dis &gt; rhs.dis;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">vector</span> &lt;Edge&gt; edge;</span><br><span class=\"line\"><span class=\"built_in\">vector</span> &lt;<span class=\"keyword\">int</span>&gt; G[MAXN];  <span class=\"comment\">//G[i]中的若干个int是几条从结点i出发的边的序号</span></span><br><span class=\"line\"><span class=\"keyword\">bool</span> visited[MAXN];</span><br><span class=\"line\"><span class=\"keyword\">int</span> dist[MAXN];</span><br><span class=\"line\"><span class=\"keyword\">int</span> n,m;</span><br><span class=\"line\"><span class=\"keyword\">int</span> cost[MAXN];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">addEdge</span><span class=\"params\">(<span class=\"keyword\">int</span> from,<span class=\"keyword\">int</span> to,<span class=\"keyword\">int</span> dist)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    edge.push_back(Edge(from,to,dist));</span><br><span class=\"line\">    G[from].push_back(edge.size()<span class=\"number\">-1</span>);   <span class=\"comment\">//添加edge[0]这条边的时候，edge.size是1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dijkstra</span><span class=\"params\">(<span class=\"keyword\">int</span> s)</span></span>&#123;</span><br><span class=\"line\">    priority_queue&lt;HeapNode&gt; Q;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        dist[i] = INF;</span><br><span class=\"line\">        cost[i] = INF;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">    dist[s] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(visited,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(visited));</span><br><span class=\"line\">    Q.push((HeapNode)&#123;<span class=\"number\">0</span>,s&#125;);    <span class=\"comment\">//把&#123;0,s&#125;作为HeapNode的三个参数,s是起始点，到自己的dis是0</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!Q.empty())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        HeapNode x = Q.top();</span><br><span class=\"line\">        Q.pop();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> u = x.u;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(visited[u])  <span class=\"keyword\">continue</span>;   <span class=\"comment\">//已经访问过</span></span><br><span class=\"line\">        visited[u] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"comment\">//找到以u为终点的要加入ans的边</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; G[u].size();i++)  <span class=\"comment\">//遍历从u出发的边</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Edge&amp; e = edge[G[u][i]];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(dist[e.to] &gt; dist[e.from] + e.dist)  <span class=\"comment\">//更新</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                dist[e.to] = dist[e.from] + e.dist;</span><br><span class=\"line\">                cost[e.to] = e.dist;</span><br><span class=\"line\">                Q.push((HeapNode)&#123;dist[e.to],e.to&#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(dist[e.to] == dist[e.from] + e.dist)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                cost[e.to] = min(cost[e.to],e.dist);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> u,v,d;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; m;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; u &gt;&gt; v &gt;&gt; d;</span><br><span class=\"line\">        addEdge(u<span class=\"number\">-1</span>,v<span class=\"number\">-1</span>,d);</span><br><span class=\"line\">        addEdge(v<span class=\"number\">-1</span>,u<span class=\"number\">-1</span>,d);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    dijkstra(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>;i &lt; n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ans += cost[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; ans;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"201604-4-游戏\">201604-4 游戏<a href=\"#201604-4-游戏\" title=\"201604-4 游戏\"></a></h4><p><strong>题目：</strong></p>\n<blockquote>\n<p>小明在玩一个电脑游戏，游戏在一个 <em>n</em>×<em>m</em> 的方格图上进行，小明控制的角色开始的时候站在第一行第一列，目标是前往第 <em>n</em> 行第 <em>m</em> 列。<br>方格图上有一些方格是始终安全的，有一些在一段时间是危险的，如果小明控制的角色到达一个方格的时候方格是危险的，则小明输掉了游戏，如果小明的角色到达了第 <em>n</em> 行第 <em>m</em> 列，则小明过关。第一行第一列和第 <em>n</em> 行第 <em>m</em> 列永远都是安全的。<br>每个单位时间，小明的角色必须向上下左右四个方向相邻的方格中的一个移动一格。<br>经过很多次尝试，小明掌握了方格图的安全和危险的规律：每一个方格出现危险的时间一定是连续的。并且，小明还掌握了每个方格在哪段时间是危险的。<br>现在，小明想知道，自己最快经过几个时间单位可以达到第 <em>n</em> 行第 <em>m</em> 列过关。</p>\n</blockquote>\n<p><strong>输入</strong></p>\n<blockquote>\n<p>输入的第一行包含三个整数 <em>n</em>, <em>m</em>, <em>t</em>，用一个空格分隔，表示方格图的行数 <em>n</em>、列数 <em>m</em>，以及方格图中有危险的方格数量。<br>接下来 <em>t</em> 行，每行 4 个整数 <em>r</em>, <em>c</em>, <em>a</em>, <em>b</em>，表示第 <em>r</em> 行第 <em>c</em> 列的方格在第 <em>a</em> 个时刻到第 <em>b</em> 个时刻之间是危险的，包括 <em>a</em> 和 <em>b</em>。游戏开始时的时刻为 0。输入数据保证 <em>r</em> 和 <em>c</em> 不同时为 1，而且当 <em>r</em> 为 <em>n</em> 时 <em>c</em> 不为 <em>m</em>。一个方格只有一段时间是危险的（或者说不会出现两行拥有相同的 <em>r</em> 和 <em>c</em>）。</p>\n</blockquote>\n<p><strong>输出</strong></p>\n<blockquote>\n<p>输出一个整数，表示小明最快经过几个时间单位可以过关。输入数据保证小明一定可以过关。</p>\n</blockquote>\n<p><strong>样例输入</strong></p>\n<blockquote>\n<p>3 3 3<br>2 1 1 1<br>1 3 2 10<br>2 2 2 10</p>\n</blockquote>\n<p><strong>样例输出</strong></p>\n<blockquote>\n<p>6</p>\n</blockquote>\n<p><strong>样例说明</strong></p>\n<blockquote>\n<p>第 2 行第 1 列时刻 1 是危险的，因此第一步必须走到第 1 行第 2 列。<br>第二步可以走到第 1 行第 1 列，第三步走到第 2 行第 1 列，后面经过第 3 行第 1 列、第 3 行第 2 列到达第 3 行第 3 列。</p>\n</blockquote>\n<p><strong>评测用例规模与约定</strong></p>\n<blockquote>\n<p>前 30% 的评测用例满足：0 &lt; <em>n</em>, <em>m</em> ≤ 10，0 ≤ <em>t</em> &lt; 99。<br>所有评测用例满足：0 &lt; <em>n</em>, <em>m</em> ≤ 100，0 ≤ <em>t</em> &lt; 9999，1 ≤ <em>r</em> ≤ <em>n</em>，1 ≤ <em>c</em> ≤ <em>m</em>，0 ≤ <em>a</em> ≤ <em>b</em> ≤ 100。</p>\n</blockquote>\n<p><strong>解题思路：</strong></p>\n<blockquote>\n<p>用类似于广度遍历的方式，什么时候有一条路走到终点了就结束。但是要设置visited数组的第三维，第三维是访问到某一点的时刻，也是到这一点所走过的步数。如果没有visited数组会运行超时，可能会重复在同一时刻访问到某个点，运行太多次。如果第三维设置太小，则可能会出现无路可走，直接错误。在这一题中设成10就能通过CSP的测试，但是保守起见应该设的更大。</p>\n</blockquote>\n<p><strong>参考代码：</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MAXN 105</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MAXM 105</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> N,M,T;</span><br><span class=\"line\"><span class=\"keyword\">int</span> mv[<span class=\"number\">4</span>][<span class=\"number\">2</span>] = &#123;&#123;<span class=\"number\">0</span>,<span class=\"number\">1</span>&#125;,&#123;<span class=\"number\">0</span>,<span class=\"number\">-1</span>&#125;,&#123;<span class=\"number\">1</span>,<span class=\"number\">0</span>&#125;,&#123;<span class=\"number\">-1</span>,<span class=\"number\">0</span>&#125;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">bool</span> visited[MAXN][MAXM][<span class=\"number\">10</span>];  <span class=\"comment\">//加入时间维度</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> start[MAXN][MAXM];  <span class=\"comment\">//记录每个点的危险起始时刻</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> fin[MAXN][MAXM];    <span class=\"comment\">//记录每个点的危险结束时刻</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Node</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> x;  <span class=\"comment\">//坐标</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> y;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len;    <span class=\"comment\">//走到这一点走了多少步，也就是时刻</span></span><br><span class=\"line\">    Node(<span class=\"keyword\">int</span> x_,<span class=\"keyword\">int</span> y_,<span class=\"keyword\">int</span> len_):x(x_),y(y_),len(len_)&#123;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//判断这个坐标是否还在区域内</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">legal</span><span class=\"params\">(<span class=\"keyword\">int</span> n,<span class=\"keyword\">int</span> m)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> n &gt;= <span class=\"number\">1</span> &amp;&amp; n &lt;= N &amp;&amp; m &gt;= <span class=\"number\">1</span> &amp;&amp; m &lt;= M;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; N &gt;&gt; M &gt;&gt; T;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> r,c,a,b;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; T;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; r &gt;&gt; c &gt;&gt; a &gt;&gt; b;</span><br><span class=\"line\">        start[r][c] = a;</span><br><span class=\"line\">        fin[r][c] = b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">queue</span>&lt;Node&gt; q;</span><br><span class=\"line\">    q.push(Node(<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>)); <span class=\"comment\">//起始点，步数是0</span></span><br><span class=\"line\">    visited[<span class=\"number\">1</span>][<span class=\"number\">1</span>][<span class=\"number\">0</span>] = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!q.empty())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Node top = q.front();</span><br><span class=\"line\">        q.pop();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(top.x == N &amp;&amp; top.y == M)    <span class=\"comment\">//到终点了</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; top.len;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> d = <span class=\"number\">0</span>;d &lt; <span class=\"number\">4</span>;d++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> nx = top.x + mv[d][<span class=\"number\">0</span>];</span><br><span class=\"line\">            <span class=\"keyword\">int</span> ny = top.y + mv[d][<span class=\"number\">1</span>];</span><br><span class=\"line\">            <span class=\"keyword\">int</span> nlen = top.len + <span class=\"number\">1</span>;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(legal(nx,ny) &amp;&amp; (nlen &lt; start[nx][ny] || nlen &gt; fin[nx][ny]) &amp;&amp; !visited[nx][ny][nlen])</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                visited[nx][ny][nlen] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                q.push(Node(nx,ny,nlen));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"201512-3-画图\">201512-3 画图<a href=\"#201512-3-画图\" title=\"201512-3 画图\"></a></h4><p><strong>问题描述</strong></p>\n<blockquote>\n<p>用 ASCII 字符来画图是一件有趣的事情，并形成了一门被称为 ASCII Art 的艺术。例如，下图是用 ASCII 字符画出来的 CSPRO 字样。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">..____.____..____..____...___..</span><br><span class=\"line\">./.___/.___||.._.\\|.._.\\./._.\\.</span><br><span class=\"line\">|.|...\\___.\\|.|_).|.|_).|.|.|.|</span><br><span class=\"line\">|.|___.___).|..__/|.._.&lt;|.|_|.|</span><br><span class=\"line\">.\\____|____/|_|...|_|.\\_\\\\___/.</span><br></pre></td></tr></table></figure>\n\n<p>　　本题要求编程实现一个用 ASCII 字符来画图的程序，支持以下两种操作：<br>　　画线：给出两个端点的坐标，画一条连接这两个端点的线段。简便起见题目保证要画的每条线段都是水平或者竖直的。水平线段用字符 - 来画，竖直线段用字符 | 来画。如果一条水平线段和一条竖直线段在某个位置相交，则相交位置用字符 + 代替。<br>　　填充：给出填充的起始位置坐标和需要填充的字符，从起始位置开始，用该字符填充相邻位置，直到遇到画布边缘或已经画好的线段。注意这里的相邻位置只需要考虑上下左右 4 个方向，如下图所示，字符 @ 只和 4 个字符 * 相邻。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.*.</span><br><span class=\"line\">*@*</span><br><span class=\"line\">.*.</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p><strong>输入格式</strong></p>\n<blockquote>\n<p>　　第 1 行有三个整数 <em>m</em>, <em>n</em> 和 <em>q</em>。<em>m</em> 和 <em>n</em> 分别表示画布的宽度和高度，以字符为单位。<em>q</em> 表示画图操作的个数。<br>　　第 2 行至第 <em>q</em> + 1 行，每行是以下两种形式之一：<br>　　0 <em>x</em>1 <em>y</em>1 <em>x</em>2 <em>y</em>2：表示画线段的操作，(<em>x</em>1, <em>y</em>1) 和 (<em>x</em>2, <em>y</em>2) 分别是线段的两端，满足要么 <em>x</em>1 = <em>x</em>2 且 <em>y</em>1 ≠ y2，要么 <em>y</em>1 = <em>y</em>2 且 <em>x</em>1 ≠ <em>x</em>2。<br>　　1 <em>x</em> <em>y</em> <em>c</em>：表示填充操作，(<em>x</em>, <em>y</em>) 是起始位置，保证不会落在任何已有的线段上；<em>c</em> 为填充字符，是大小写字母。<br>　　画布的左下角是坐标为 (0, 0) 的位置，向右为 <em>x</em> 坐标增大的方向，向上为 <em>y</em> 坐标增大的方向。这 <em>q</em> 个操作按照数据给出的顺序依次执行。画布最初时所有位置都是字符 .（小数点）。</p>\n</blockquote>\n<p><strong>输出格式</strong></p>\n<blockquote>\n<p>　输出有 <em>n</em> 行，每行 <em>m</em> 个字符，表示依次执行这 <em>q</em> 个操作后得到的画图结果。</p>\n</blockquote>\n<p><strong>样例输入</strong></p>\n<blockquote>\n<p>4 2 3<br>1 0 0 B<br>0 1 0 2 0<br>1 0 0 A</p>\n</blockquote>\n<p><strong>样例输出</strong></p>\n<blockquote>\n<p>AAAA<br>A--A</p>\n</blockquote>\n<p><strong>样例输入</strong></p>\n<blockquote>\n<p>16 13 9<br>0 3 1 12 1<br>0 12 1 12 3<br>0 12 3 6 3<br>0 6 3 6 9<br>0 6 9 12 9<br>0 12 9 12 11<br>0 12 11 3 11<br>0 3 11 3 1<br>1 4 2 C</p>\n</blockquote>\n<p><strong>样例输出</strong></p>\n<blockquote>\n<p>................<br>...+--------+...<br>...|CCCCCCCC|...<br>...|CC+-----+...<br>...|CC|.........<br>...|CC|.........<br>...|CC|.........<br>...|CC|.........<br>...|CC|.........<br>...|CC+-----+...<br>...|CCCCCCCC|...<br>...+--------+...<br>................</p>\n</blockquote>\n<p><strong>评测用例规模与约定</strong></p>\n<blockquote>\n<p>所有的评测用例满足：2 ≤ <em>m</em>, <em>n</em> ≤ 100，0 ≤ <em>q</em> ≤ 100，0 ≤ <em>x</em> &lt; <em>m</em>（<em>x</em> 表示输入数据中所有位置的 <em>x</em> 坐标），0 ≤ <em>y</em> &lt; <em>n</em>（<em>y</em> 表示输入数据中所有位置的 <em>y</em> 坐标）。</p>\n</blockquote>\n<p><strong>参考代码</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MAX 105</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">char</span> canvas[MAX][MAX];</span><br><span class=\"line\"><span class=\"keyword\">int</span> m,n,q;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">drawline</span><span class=\"params\">(<span class=\"keyword\">int</span> x1,<span class=\"keyword\">int</span> y1,<span class=\"keyword\">int</span> x2,<span class=\"keyword\">int</span> y2)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(y1 == y2)    <span class=\"comment\">//水平线</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x1 &gt; x2) swap(x1,x2);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> x = x1;x &lt;= x2;x++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(canvas[y1][x] == <span class=\"string\">'|'</span> || canvas[y1][x] == <span class=\"string\">'+'</span>) canvas[y1][x] = <span class=\"string\">'+'</span>;   <span class=\"comment\">//画交点</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span> canvas[y1][x] = <span class=\"string\">'-'</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(x1 == x2)   <span class=\"comment\">//画垂直线</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(y1 &gt; y2) swap(y1,y2);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> y = y1;y &lt;= y2;y++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(canvas[y][x1] == <span class=\"string\">'-'</span> || canvas[y][x1] == <span class=\"string\">'+'</span>)    canvas[y][x1] = <span class=\"string\">'+'</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> canvas[y][x1] = <span class=\"string\">'|'</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> dx[<span class=\"number\">4</span>] = &#123;<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">-1</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span> dy[<span class=\"number\">4</span>] = &#123;<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">-1</span>,<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">fill</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y,<span class=\"keyword\">char</span> ch)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    canvas[y][x] = ch;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; <span class=\"number\">4</span>;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> nx = x + dx[i],ny = y + dy[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ny &gt;= <span class=\"number\">0</span> &amp;&amp; ny &lt; n &amp;&amp; nx &gt;= <span class=\"number\">0</span> &amp;&amp; nx &lt; m &amp;&amp; canvas[ny][nx] != ch &amp;&amp; canvas[ny][nx] != <span class=\"string\">'-'</span> &amp;&amp; canvas[ny][nx] != <span class=\"string\">'|'</span> &amp;&amp; canvas[ny][nx] != <span class=\"string\">'+'</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            fill(nx,ny,ch);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">output</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> y = <span class=\"number\">0</span>;y &lt; n;y++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> x = <span class=\"number\">0</span>;x &lt; m;x++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; canvas[y][x];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; m &gt;&gt; n &gt;&gt; q;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> x1,x2,y1,y2,op;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> ch;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; n;i++)    <span class=\"comment\">//初始全部为点</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>;j &lt; m;j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            canvas[i][j] = <span class=\"string\">'.'</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(q--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; op;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(op == <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">cin</span> &gt;&gt; x1 &gt;&gt; y1 &gt;&gt; x2 &gt;&gt; y2;</span><br><span class=\"line\">            drawline(x1,n-y1<span class=\"number\">-1</span>,x2,n-y2<span class=\"number\">-1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(op == <span class=\"number\">1</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">cin</span> &gt;&gt; x1 &gt;&gt; y1 &gt;&gt; ch;</span><br><span class=\"line\">            fill(x1,n-y1<span class=\"number\">-1</span>,ch);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    output();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>部分代码解释：</p>\n<ul><li><code>swap(x1,x2)</code>：C语言<code>swap()</code>函数能将两个数值调换。</li><li><code>dx[4]</code>和<code>dy[4]</code>：因为要逐个查看某个字符上下左右字符是否要替换，所以就事先将xy坐标的四种变动存起来，直接用for循环实现访问上下左右四个位置。</li></ul><h4 id=\"201509-3-模板生成系统\">201509-3 模板生成系统<a href=\"#201509-3-模板生成系统\" title=\"201509-3 模板生成系统\"></a></h4><p><strong>问题描述</strong></p>\n<blockquote>\n<p>成成最近在搭建一个网站，其中一些页面的部分内容来自数据库中不同的数据记录，但是页面的基本结构是相同的。例如，对于展示用户信息的页面，当用户为 Tom 时，网页的源代码是</p>\n<p><img src=\"https://i.loli.net/2020/08/28/4i6q7zJ9KvfUwnD.png\" alt=\"模板生成系统1\"></p>\n<p>而当用户为 Jerry 时，网页的源代码是</p>\n<p><img src=\"https://i.loli.net/2020/08/28/twmdXq8fpi1M9zU.png\" alt=\"模板生成系统2\"></p>\n<p>　这样的例子在包含动态内容的网站中还有很多。为了简化生成网页的工作，成成觉得他需要引入一套模板生成系统。<br>　　模板是包含特殊标记的文本。成成用到的模板只包含一种特殊标记，格式为 { {VAR} }，其中 VAR 是一个变量。该标记在模板生成时会被变量 VAR 的值所替代。例如，如果变量 name = &quot;Tom&quot;，则 { { name } } 会生成 Tom。具体的规则如下：<br>　　・变量名由大小写字母、数字和下划线 (_) 构成，且第一个字符不是数字，长度不超过 16 个字符。<br>　　・变量名是大小写敏感的，Name 和 name 是两个不同的变量。<br>　　・变量的值是字符串。<br>　　・如果标记中的变量没有定义，则生成空串，相当于把标记从模板中删除。<br>　　・模板不递归生成。也就是说，如果变量的值中包含形如 { {VAR} } 的内容，不再做进一步的替换。</p>\n</blockquote>\n<p><strong>输入格式</strong></p>\n<blockquote>\n<p>输入的第一行包含两个整数 <em>m</em>, <em>n</em>，分别表示模板的行数和模板生成时给出的变量个数。<br>　　接下来 <em>m</em> 行，每行是一个字符串，表示模板。<br>　　接下来 <em>n</em> 行，每行表示一个变量和它的值，中间用一个空格分隔。值是字符串，用双引号 (&quot;) 括起来，内容可包含除双引号以外的任意可打印 ASCII 字符（ASCII 码范围 32, 33, 35-126）。</p>\n</blockquote>\n<p><strong>输出格式</strong></p>\n<blockquote>\n<p>输出包含若干行，表示模板生成的结果。</p>\n</blockquote>\n<p><strong>样例输入</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">11 2</span><br><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;title&gt;User &#123; &#123; name &#125; &#125;&lt;&#x2F;title&gt;</span><br><span class=\"line\">&lt;&#x2F;head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;h1&gt;&#123; &#123; name &#125; &#125;&lt;&#x2F;h1&gt;</span><br><span class=\"line\">&lt;p&gt;Email: &lt;a href&#x3D;&quot;mailto:&#123; &#123; email &#125; &#125;&quot;&gt;&#123; &#123; email &#125; &#125;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;</span><br><span class=\"line\">&lt;p&gt;Address: &#123; &#123; address &#125; &#125;&lt;&#x2F;p&gt;</span><br><span class=\"line\">&lt;&#x2F;body&gt;</span><br><span class=\"line\">&lt;&#x2F;html&gt;</span><br><span class=\"line\">name &quot;David Beckham&quot;</span><br><span class=\"line\">email &quot;david@beckham.com&quot;</span><br></pre></td></tr></table></figure>\n\n<p><strong>样例输出</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;title&gt;User David Beckham&lt;&#x2F;title&gt;</span><br><span class=\"line\">&lt;&#x2F;head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;h1&gt;David Beckham&lt;&#x2F;h1&gt;</span><br><span class=\"line\">&lt;p&gt;Email: &lt;a href&#x3D;&quot;mailto:david@beckham.com&quot;&gt;david@beckham.com&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;</span><br><span class=\"line\">&lt;p&gt;Address: &lt;&#x2F;p&gt;</span><br><span class=\"line\">&lt;&#x2F;body&gt;</span><br><span class=\"line\">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>评测用例规模与约定</strong></p>\n<blockquote>\n<p>0 ≤ <em>m</em> ≤ 100<br>0 ≤ <em>n</em> ≤ 100<br>输入的模板每行长度不超过 80 个字符（不包含换行符）。<br>输入保证模板中所有以 { { 开始的子串都是合法的标记，开始是两个左大括号和一个空格，然后是变量名，结尾是一个空格和两个右大括号。<br>输入中所有变量的值字符串长度不超过 100 个字符（不包括双引号）。<br>保证输入的所有变量的名字各不相同。</p>\n</blockquote>\n<p><strong>参考代码</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sstream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MAXN 105</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MAXL 85</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> m,n;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> tpl[MAXN][MAXL];</span><br><span class=\"line\">    <span class=\"built_in\">map</span>&lt;<span class=\"built_in\">string</span>,<span class=\"built_in\">string</span>&gt; var;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; m &gt;&gt; n;</span><br><span class=\"line\">    getchar();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; m;i++)</span><br><span class=\"line\">        gets(tpl[i]);</span><br><span class=\"line\">    <span class=\"keyword\">char</span> key[MAXL],value[MAXL];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%s \"</span>,key);</span><br><span class=\"line\">        gets(value);</span><br><span class=\"line\">        value[<span class=\"number\">0</span>] = value[<span class=\"built_in\">strlen</span>(value)<span class=\"number\">-1</span>] = <span class=\"number\">0</span>;  <span class=\"comment\">//前后两个双引号赋值为0</span></span><br><span class=\"line\">        var[key] = value + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; m;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">char</span> *p1 = tpl[i];</span><br><span class=\"line\">        <span class=\"keyword\">char</span> *p2;</span><br><span class=\"line\">        p2 = <span class=\"built_in\">strstr</span>(p1,<span class=\"string\">\"&#123; &#123;\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(p2 != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            *p2 = <span class=\"string\">'\\0'</span>;     <span class=\"comment\">//做特殊处理方便输出</span></span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; p1;</span><br><span class=\"line\">            <span class=\"function\"><span class=\"built_in\">stringstream</span> <span class=\"title\">ss</span><span class=\"params\">(p2+<span class=\"number\">3</span>)</span></span>;</span><br><span class=\"line\">            <span class=\"built_in\">string</span> key;</span><br><span class=\"line\">            ss &gt;&gt; key;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt;var[key];</span><br><span class=\"line\">            p2 = <span class=\"built_in\">strstr</span>(p2+<span class=\"number\">2</span>,<span class=\"string\">\"&#125; &#125;\"</span>);</span><br><span class=\"line\">            p1 = p2+<span class=\"number\">2</span>;</span><br><span class=\"line\">            p2 = <span class=\"built_in\">strstr</span>(p1,<span class=\"string\">\"&#123; &#123;\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(p2 == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; p1 &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>部分代码解释：</p>\n<ul><li><p>在<code>cin &gt;&gt; m &gt;&gt; n</code>之后必须有<code>getchar()</code>这一句，否则后面全都错位一个。</p></li><li><p>char a = &#39;\\0&#39; 代表转义字符表示空字符，char a = 0 对应 ASCII 码表上的空字符，都打印不出东西，两者意义相同</p></li><li></li></ul><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">char</span> *p2;</span><br><span class=\"line\">p2 = <span class=\"built_in\">strstr</span>(p1,<span class=\"string\">\"&#123; &#123;\"</span>);</span><br></pre></td></tr></table></figure>\n\n<p>  <code>strstr()</code>返回的是p1中第一个出现<code>{ {</code>的位置，此时p2指向第一个<code>{</code>。</p>\n<ul><li><p><code>stringstream ss(p2+3);</code>这句写成p2+3和p2+2都对，p2+2是花括号后的第一个空格，p2+3是字符串的第一位。<code>stringstream</code>自带按空格分割功能，<code>ss &gt;&gt; key;</code>就是以字符串后面的空格分割。</p></li><li><p><code>string key; ss &gt;&gt; key;</code>这段如果不是key，而且key2或者别的，就运行不出来，不明白为啥。</p></li></ul><p>[注]:转义内容 Hexo使用Nunjucks 渲染帖子，不能出现两个花括号在一起的情况，否则报错，所以题目中所有出现两个花括号的地方我都在中间加了个空格，代码不能直接跑，要手动去掉这些空格。</p>\n<h4 id=\"201409-3-字符串匹配\">201409-3 字符串匹配<a href=\"#201409-3-字符串匹配\" title=\"201409-3 字符串匹配\"></a></h4><p><strong>问题描述</strong></p>\n<blockquote>\n<p>给出一个字符串和多行文字，在这些文字中找到字符串出现的那些行。你的程序还需支持大小写敏感选项：当选项打开时，表示同一个字母的大写和小写看作不同的字符；当选项关闭时，表示同一个字母的大写和小写看作相同的字符。</p>\n</blockquote>\n<p><strong>输入格式</strong></p>\n<blockquote>\n<p>输入的第一行包含一个字符串 S，由大小写英文字母组成。<br>第二行包含一个数字，表示大小写敏感的选项，当数字为 0 时表示大小写不敏感，当数字为 1 时表示大小写敏感。<br>第三行包含一个整数 n，表示给出的文字的行数。<br>接下来 n 行，每行包含一个字符串，字符串由大小写英文字母组成，不含空格和其他字符。</p>\n</blockquote>\n<p><strong>输出格式</strong></p>\n<blockquote>\n<p>输出多行，每行包含一个字符串，按出现的顺序依次给出那些包含了字符串 S 的行。</p>\n</blockquote>\n<p><strong>样例输入</strong></p>\n<blockquote>\n<p>Hello<br>1  \n5<br>HelloWorld<br>HiHiHelloHiHi<br>GrepIsAGreatTool<br>HELLO<br>HELLOisNOTHello</p>\n</blockquote>\n<p><strong>样例输出</strong></p>\n<blockquote>\n<p>HelloWorld<br>HiHiHelloHiHi<br>HELLOisNOTHello</p>\n</blockquote>\n<p><strong>样例说明</strong></p>\n<blockquote>\n<p>在上面的样例中，第四个字符串虽然也是 Hello，但是大小写不正确。如果将输入的第二行改为 0，则第四个字符串应该输出。</p>\n</blockquote>\n<p><strong>评测用例规模与约定</strong></p>\n<blockquote>\n<p>1&lt;=n&lt;=100，每个字符串的长度不超过 100。</p>\n</blockquote>\n<p><strong>解题思路</strong></p>\n<p>如果大小写不敏感的话，就把S和T全都转成小写字母再比较。</p>\n<p><strong>参考代码</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">string</span> S;</span><br><span class=\"line\"><span class=\"keyword\">int</span> flag;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; S &gt;&gt; flag &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(flag == <span class=\"number\">0</span>)</span><br><span class=\"line\">        transform(S.begin(),S.end(),S.begin(),::<span class=\"built_in\">tolower</span>);</span><br><span class=\"line\">    <span class=\"built_in\">string</span> T,tmp;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; T;</span><br><span class=\"line\">        tmp.resize(T.size());</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(flag == <span class=\"number\">0</span>)</span><br><span class=\"line\">            transform(T.begin(),T.end(),tmp.begin(),::<span class=\"built_in\">tolower</span>);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> tmp = T;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(tmp.find(S,<span class=\"number\">0</span>) != <span class=\"built_in\">string</span>::npos) <span class=\"built_in\">cout</span> &lt;&lt; T &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>部分代码解释：</p>\n<ul><li><p><code>transform(S.begin(),S.end(),S.begin(),::tolower)</code>：第一个参数是源容器的起始地址 ，第二个参数是源容器的终止地址 ，第三个参数是目标容器的起始地址，第四个参数是函数指针。</p><p>另外，在<code>#include &lt;cctype&gt;</code>中也有<code>tolower()</code>函数，用法是<code>str[i] = tolower(str[i]);</code>。</p></li><li><p>之所以要加一个tmp，是因为tmp是转换为小写后的，但是输出还是要原来转换前的。</p></li><li><p>C++ 中 find () 函数用法：</p><p>(1) 头文件<code>#include &lt;algorithm&gt;</code>，返回值是目标元素的下标，找不到时返回值为迭代器结尾</p></li></ul><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">string</span> = <span class=\"string\">\"hello\"</span>;</span><br><span class=\"line\">find(s.begin(), s.end(), <span class=\"string\">'o'</span>) == s.end()</span><br></pre></td></tr></table></figure>\n\n<p>​        (2) 头文件<code>#include &lt;string&gt;</code></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">string</span> str1, str2;</span><br><span class=\"line\"><span class=\"keyword\">char</span> c;</span><br><span class=\"line\">str1.find(str2);<span class=\"comment\">//从串str1中查找时str2，返回str2中首个字符在str1中的地址</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">str1.find(str2,<span class=\"number\">5</span>);<span class=\"comment\">//从str1的第5个字符开始查找str2</span></span><br><span class=\"line\"></span><br><span class=\"line\">str1.find(c);<span class=\"comment\">//在str1中查找字符o并返回第一个查找到的地址</span></span><br><span class=\"line\"></span><br><span class=\"line\">str1.find(<span class=\"string\">\"str2\"</span>,<span class=\"number\">2</span> , <span class=\"number\">2</span>);<span class=\"comment\">//从str1中的第二个字符开始查找of big的前两个字符</span></span><br></pre></td></tr></table></figure>\n\n<ul><li>查找字符串 a 是否包含子串 b 不是用 <code>strA.find (strB) &gt; 0</code> 而是 <code>strA.find (strB) != string:npos</code>，条件成立就是含有子串。</li></ul><h4 id=\"201312-4-有趣的数\">201312-4 有趣的数<a href=\"#201312-4-有趣的数\" title=\"201312-4 有趣的数\"></a></h4><p><strong>问题描述</strong></p>\n<blockquote>\n<p>我们把一个数称为有趣的，当且仅当：</p>\n<ol><li><p>它的数字只包含 0, 1, 2, 3，且这四个数字都出现过至少一次。</p></li><li><p>所有的 0 都出现在所有的 1 之前，而所有的 2 都出现在所有的 3 之前。</p></li><li><p>最高位数字不为 0。</p></li></ol><p>因此，符合我们定义的最小的有趣的数是 2013。除此以外，4 位的有趣的数还有两个：2031 和 2301。<br>请计算恰好有 n 位的有趣的数的个数。由于答案可能非常大，只需要输出答案除以 1000000007 的余数。</p>\n</blockquote>\n<p><strong>输入格式</strong></p>\n<blockquote>\n<p>输入只有一行，包括恰好一个正整数 n (4 ≤ n ≤ 1000)。</p>\n</blockquote>\n<p><strong>输出格式</strong></p>\n<blockquote>\n<p>输出只有一行，包括恰好 n 位的整数中有趣的数的个数除以 1000000007 的余数。</p>\n</blockquote>\n<p><strong>样例输入</strong></p>\n<blockquote>\n<p>4</p>\n</blockquote>\n<p><strong>样例输出</strong></p>\n<blockquote>\n<p>3</p>\n</blockquote>\n<p><strong>解题思路</strong></p>\n<blockquote>\n<p>动态规划思想。通过分析得知，第 1 位数字必是 2，前 i 位的数字组成有以下 6 种情况：</p>\n<p>0、只包含 2<br>1、只包含 2、0<br>2、只包含 2、3<br>3、只包含 2、0、1<br>4、只包含 2、0、3<br>5、只包含 2、0、1、3 </p>\n<p>且第 i+1 位数字的取法与前 i 位有关。我们设 <code>dp[i][j]</code> 表示前 i 位数字是由第 j 种情况组成的有趣的数的个数，那么可以得到 <code>dp[i]</code>与 <code>dp[i-1]</code> 的递推式：</p>\n<p> <code>dp[i][0]=1</code> （前 i-1 位全为 2，那么第 i 位在情况 0 下只能取 2，且只有 1 种）<br><code>dp[i][1]=dp[i-1][0]+dp[i-1][1]*2</code>（若前 i-1 位由 2 组成，那么第 i 位只能取 0 以满足情况 1；若前 i-1 位由 2、0 组成，那么第 i 位在情况 1 下可以取 2 或 0。以下类似）<br><code>dp[i][2]=dp[i-1][0]+dp[i-1][2]</code><br><code>dp[i][3]=dp[i-1][1]+dp[i-1][3]*2</code><br><code>dp[i][4]=dp[i-1][1]+dp[i-1][2]+dp[i-1][4]*2</code><br><code>dp[i][5]=dp[i-1][3]+dp[i-1][4]+dp[i-1][5]*2</code></p>\n</blockquote>\n<p><strong>参考代码</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MAXN 1002</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> mod = <span class=\"number\">1000000007</span>;</span><br><span class=\"line\">LL dp[MAXN][<span class=\"number\">6</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> n;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>;i &lt;= n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        dp[i][<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        dp[i][<span class=\"number\">1</span>] = (dp[i<span class=\"number\">-1</span>][<span class=\"number\">0</span>] + dp[i<span class=\"number\">-1</span>][<span class=\"number\">1</span>]*<span class=\"number\">2</span>) % mod;</span><br><span class=\"line\">        dp[i][<span class=\"number\">2</span>] = (dp[i<span class=\"number\">-1</span>][<span class=\"number\">0</span>] + dp[i<span class=\"number\">-1</span>][<span class=\"number\">2</span>]) % mod;</span><br><span class=\"line\">        dp[i][<span class=\"number\">3</span>] = (dp[i<span class=\"number\">-1</span>][<span class=\"number\">1</span>] + dp[i<span class=\"number\">-1</span>][<span class=\"number\">3</span>]*<span class=\"number\">2</span>) % mod;</span><br><span class=\"line\">        dp[i][<span class=\"number\">4</span>] = (dp[i<span class=\"number\">-1</span>][<span class=\"number\">1</span>] + dp[i<span class=\"number\">-1</span>][<span class=\"number\">2</span>] + dp[i<span class=\"number\">-1</span>][<span class=\"number\">4</span>]*<span class=\"number\">2</span>) % mod;</span><br><span class=\"line\">        dp[i][<span class=\"number\">5</span>] = (dp[i<span class=\"number\">-1</span>][<span class=\"number\">3</span>] + dp[i<span class=\"number\">-1</span>][<span class=\"number\">4</span>] + dp[i<span class=\"number\">-1</span>][<span class=\"number\">5</span>]*<span class=\"number\">2</span>) % mod;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; dp[n][<span class=\"number\">5</span>];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","prev":{"title":"pytorch笔记一：线性回归","link":"2020/02/13/pytorch笔记一：线性回归"},"next":{"title":"csp刷题笔记（第1-2题）","link":"2020/02/10/csp刷题笔记（第1-2题）"},"plink":"https://yuyuoo.github.io/2020/02/10/csp刷题笔记（第3-4题）/","copyright":{"license":"Attribution-NonCommercial-NoDerivatives 4.0 International","published":"February 10, 2020","updated":"September 10, 2020","author":"YuYuoo"}}