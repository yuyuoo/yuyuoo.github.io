{"title":"算法笔记之《算法笔记》","date":"2020-09-04T03:04:14.000Z","date_formatted":{"ll":"Sep 4, 2020","L":"09/04/2020","MM-DD":"09-04"},"thumbnail":"https://i.loli.net/2020/09/04/yCzXAYSRxPMwGqB.jpg","link":"2020/09/04/算法笔记之《算法笔记》","comments":true,"tags":["csp","算法"],"categories":["Programming"],"updated":"2020-09-06T08:24:22.511Z","content":"<h4 id=\"贪心-recoverthesmallestnumber\">贪心-RecoverTheSmallestNumber<a href=\"#贪心-recoverthesmallestnumber\" title=\"贪心-RecoverTheSmallestNumber\"></a></h4><p>《上机训练》p.162</p>\n<p><strong>题意</strong>：</p>\n<blockquote>\n<p>给出若干可能有前导零的数字串，将它们按某个顺序拼接，使生成的数最小。</p>\n</blockquote>\n<p><strong>样例输入</strong></p>\n<blockquote>\n<p>5 32 321 3214 0229 87</p>\n</blockquote>\n<p><strong>样例输出</strong></p>\n<blockquote>\n<p>22932132143287</p>\n</blockquote>\n<p><strong>样例解释</strong></p>\n<blockquote>\n<p>将数字串按0229、321、3214、32、87的顺序拼接，使生成的数最小</p>\n</blockquote>\n<p><strong>思路</strong></p>\n<blockquote>\n<p>对所有的数字串S1与S2，如果有S1+S2&lt;S2+S1（拼接），就把S1放在S2前面。</p>\n<p>直接使用string的加号进行字符串拼接，比较过程直接写一个cmp函数，调用sort()。</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MAXN 10005</span></span><br><span class=\"line\"><span class=\"built_in\">string</span> str[MAXN];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">cmp</span><span class=\"params\">(<span class=\"built_in\">string</span> a,<span class=\"built_in\">string</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b &lt; b + a;   <span class=\"comment\">//如果a+b&lt;b+a，就把a排在前面</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; n;i++)</span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; str[i];</span><br><span class=\"line\">    sort(str, str+n, cmp);  <span class=\"comment\">//排序</span></span><br><span class=\"line\">    <span class=\"built_in\">string</span> ans; <span class=\"comment\">//结果字符串</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; n;i++)</span><br><span class=\"line\"></span><br><span class=\"line\">        ans += str[i];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(ans.size() != <span class=\"number\">0</span> &amp;&amp; ans[<span class=\"number\">0</span>] == <span class=\"string\">'0'</span>)</span><br><span class=\"line\">        ans.erase(ans.begin()); <span class=\"comment\">//去除前导零</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(ans.size() == <span class=\"number\">0</span>) <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"number\">0</span>;  <span class=\"comment\">//去除前导零后没了，输出0</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"built_in\">cout</span> &lt;&lt; ans;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"完美数列\">完美数列<a href=\"#完美数列\" title=\"完美数列\"></a></h4><h5 id=\"（1）二分法\">（1）二分法<a href=\"#（1）二分法\" title=\"（1）二分法\"></a></h5><p>《上机训练》p.165</p>\n<p><strong>题意</strong>：</p>\n<blockquote>\n<p>第一行给出N,p的值，从N个正整数中选择若干个数，使得选出的这些数中的最大值不超过最小值的p倍</p>\n</blockquote>\n<p><strong>样例输入</strong></p>\n<blockquote>\n<p>10 8</p>\n<p>2 3 20 4 5 1 6 7 8 9</p>\n</blockquote>\n<p><strong>样例输出</strong></p>\n<blockquote>\n<p>8</p>\n</blockquote>\n<p><strong>样例解释</strong></p>\n<blockquote>\n<p>最多选出8个数，2 3 4 5 6 7 8 9或者1 2 3 4 5 6 7 8</p>\n</blockquote>\n<p><strong>思路</strong></p>\n<blockquote>\n<p>先对n个数从小到大排序，再从第一个开始逐个遍历，以这个数为最小数，往后数从哪个数开始不符合最大数规则，记录 j-i+1 是本轮数的个数。</p>\n<p>在查找符合规则的最大数的时候，可以自己写函数用二分法查找，但可以直接用 upper_bound() 函数，upper_bound()函数返回的规定范围内大于指定值的第一个数的指针或者迭代器。</p>\n</blockquote>\n<p><strong>参考代码</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MAXN 100005</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> n,p,a[MAXN];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>,&amp;n,&amp;p);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;a[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    sort(a,a+n);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans = <span class=\"number\">1</span>;    <span class=\"comment\">//最大长度，初值为1（表示至少有一个数）</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//在a[i+1]~a[n-1]中查找第一个超过a[i]*p的数，返回其位置给j</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> j = upper_bound(a + i + <span class=\"number\">1</span>,a + n,(<span class=\"keyword\">long</span> <span class=\"keyword\">long</span>)a[i] * p) - a;</span><br><span class=\"line\">        ans = max(ans,j - i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, ans);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"（2）two-pointers\">（2）two pointers<a href=\"#（2）two-pointers\" title=\"（2）two pointers\"></a></h5><p><strong>思路</strong></p>\n<blockquote>\n<p>指针 i 在前面，j 在后面，控制 j 指向从 i 开始第一个不满足条件的位置。不断让 i 右移，再重新更新 j 应在的位置，知道 i 右移到最后一位，利用count记录全过程中 j 和 i 距离最大的时候。</p>\n</blockquote>\n<p><strong>参考代码</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MAXN 100005</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n,p,a[MAXN];</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>,&amp;n,&amp;p);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;a[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    sort(a, a + n);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>,j = <span class=\"number\">0</span>,count = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i &lt; n &amp;&amp; j &lt; n)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//j不断右移，直到恰好不满足条件</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(j &lt; n &amp;&amp; a[j] &lt;= (<span class=\"keyword\">long</span> <span class=\"keyword\">long</span>)a[i] * p)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            count = max(count,j - i + <span class=\"number\">1</span>);</span><br><span class=\"line\">            j++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        i++;    <span class=\"comment\">//i右移一位</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,count);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"并查集-socialclusters\">并查集-SocialClusters<a href=\"#并查集-socialclusters\" title=\"并查集-SocialClusters\"></a></h4><p>《上机训练》p.330</p>\n<p><strong>题意</strong>：</p>\n<blockquote>\n<p>有N个人，每个人喜欢若干项活动，如果两个人有任意一个活动相同，那么就称他们属于同一个社交网络（如果A和B属于同一个，B和C属于同一个，则ABC属于同一个）。求这N个人共形成了多少个社交网络</p>\n</blockquote>\n<p><strong>样例输入</strong></p>\n<blockquote>\n<p>8  \n3:2 7 10<br>1:4<br>2:5 3<br>1:4<br>1:3<br>1:4<br>4:6 8 1 5<br>1:4</p>\n</blockquote>\n<p><strong>样例输出</strong></p>\n<blockquote>\n<p>3  \n4 3 1</p>\n</blockquote>\n<p><strong>样例解释</strong></p>\n<blockquote>\n<p>3个社交网络，每个网络按人数从大到小为4人，3人，1人</p>\n</blockquote>\n<p><strong>思路</strong></p>\n<blockquote>\n<p>course[h]记录第一个喜欢活动h的人的编号，findFather(course[h]) 是这个人所在的社交网络的根结点。对当前读入的人的编号 i 和他喜欢的每个活动h，需要合并 i 与 findFather(course[h])。isRoot[x] 指以 x 号人作为根结点的社交网络中有多少人，如果x不是根结点，isRoot[x]就是0。</p>\n<p>并查集在Union两个点的时候要路径压缩。</p>\n</blockquote>\n<p><strong>参考代码</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 1005</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> father[N];  <span class=\"comment\">//存放父亲结点</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> isRoot[N] = &#123;<span class=\"number\">0</span>&#125;;    <span class=\"comment\">//记录是否作为某个集合的根结点</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> course[N] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">findFather</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span>   <span class=\"comment\">//查找x所在结点的根结点</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a = x;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(x != father[x])</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        x = father[x];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//路径压缩</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(a != father[a])</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> z = a;</span><br><span class=\"line\">        a = father[a];</span><br><span class=\"line\">        father[z] = x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Union</span><span class=\"params\">(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> faA = findFather(a);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> faB = findFather(b);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(faA != faB)  <span class=\"comment\">//相同可能是这个人单独喜欢了一个活动，但不要再改father了，防止这个结点在别的活动里已经加入一个集合了</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        father[faA] = faB;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span>    <span class=\"comment\">//初始化father[i]为i,flag[i] = false</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>;i &lt;= n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        father[i] = i;</span><br><span class=\"line\">        isRoot[i] = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">cmp</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span>  <span class=\"comment\">//将isRoot数组从大到小排序</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a &gt; b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n,k,h;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;n);    <span class=\"comment\">//人数</span></span><br><span class=\"line\">    init(n);    <span class=\"comment\">//初始化</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>;i &lt;= n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d:\"</span>,&amp;k);    <span class=\"comment\">//活动个数</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>;j &lt; k;j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;h); <span class=\"comment\">//i号人喜欢的活动h</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(course[h] == <span class=\"number\">0</span>)  <span class=\"comment\">//活动h第一次有人喜欢</span></span><br><span class=\"line\">                course[h] = i;</span><br><span class=\"line\">            Union(i, findFather(course[h]));    <span class=\"comment\">//合并</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>;i &lt;= n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        isRoot[findFather(i)]++;    <span class=\"comment\">//i的根结点是findFather[i]，人数加1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans = <span class=\"number\">0</span>;    <span class=\"comment\">//记录集合数目</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>;i &lt;= n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(isRoot[i] != <span class=\"number\">0</span>)  <span class=\"comment\">//是根结点</span></span><br><span class=\"line\">            ans++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,ans);</span><br><span class=\"line\">    sort(isRoot+<span class=\"number\">1</span>, isRoot+n+<span class=\"number\">1</span>, cmp);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>;i &lt;= ans;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\"</span>,isRoot[i]);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i &lt; ans) <span class=\"built_in\">printf</span>(<span class=\"string\">\" \"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","prev":{"title":"利用NS3部署不同拓扑无线网络","link":"2020/11/13/利用NS3部署不同拓扑无线网络"},"next":{"title":"蓝桥杯校内模拟赛","link":"2020/03/19/蓝桥杯校内模拟赛"},"plink":"https://yuyuoo.github.io/2020/09/04/算法笔记之《算法笔记》/","copyright":{"license":"Attribution-NonCommercial-NoDerivatives 4.0 International","published":"September 4, 2020","updated":"September 6, 2020","author":"YuYuoo"}}